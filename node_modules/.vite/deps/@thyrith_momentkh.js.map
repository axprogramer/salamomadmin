{
  "version": 3,
  "sources": ["../../@thyrith/momentkh/locale/km.js", "../../@thyrith/momentkh/constant.js", "../../@thyrith/momentkh/getSoriyatraLerngSak.js", "../../@thyrith/momentkh/momentkh.js"],
  "sourcesContent": ["//! moment.js locale configuration\n\n;(function (global, factory) {\n  if (typeof exports === 'object' && typeof module !== 'undefined') {\n    module.exports = factory()\n  } else {\n    if (typeof define === 'function' && define.amd) {\n      define(factory)\n    } else {\n      if (!global.momentkhLocales) {\n        global.momentkhLocales = {\n          'km': factory()\n        }\n      } else {\n        global.momentkhLocales['km'] = factory()\n      }\n    }\n  }\n}(this, (function () {\n  'use strict';\n\n  let symbolMap = {\n    '1': '១',\n    '2': '២',\n    '3': '៣',\n    '4': '៤',\n    '5': '៥',\n    '6': '៦',\n    '7': '៧',\n    '8': '៨',\n    '9': '៩',\n    '0': '០'\n  }, numberMap = {\n    '១': '1',\n    '២': '2',\n    '៣': '3',\n    '៤': '4',\n    '៥': '5',\n    '៦': '6',\n    '៧': '7',\n    '៨': '8',\n    '៩': '9',\n    '០': '0'\n  };\n\n  return {\n    months: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),\n    monthsShort: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),\n    moonDays: '᧡_᧢_᧣_᧤_᧥_᧦_᧧_᧨_᧩_᧪_᧫_᧬_᧭_᧮_᧯_᧱_᧲_᧳_᧴_᧵_᧶_᧷_᧸_᧹_᧺_᧻_᧼_᧽_᧾_᧿'.split('_'),\n    moonStatus: \"កើត_រោច\".split(\"_\"),\n    moonStatusShort: \"ក_រ\".split(\"_\"),\n    weekdays: 'អាទិត្យ_ច​ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),\n    weekdaysShort: 'អា_ច_អ_ព_ព្រ_សុ_ស'.split('_'),\n    weekdaysMin: 'អា_ច_អ_ព_ព្រ_សុ_ស'.split('_'),\n    lunarMonths: \"មិគសិរ_បុស្ស_មាឃ_ផល្គុន_ចេត្រ_ពិសាខ_ជេស្ឋ_អាសាឍ_ស្រាពណ៍_ភទ្របទ_អស្សុជ_កត្ដិក_បឋមាសាឍ_ទុតិយាសាឍ\".split(\"_\"),\n    animalYear: \"ជូត_ឆ្លូវ_ខាល_ថោះ_រោង_ម្សាញ់_មមី_មមែ_វក_រកា_ច_កុរ\".split(\"_\"),\n    eraYear: \"សំរឹទ្ធិស័ក_ឯកស័ក_ទោស័ក_ត្រីស័ក_ចត្វាស័ក_បញ្ចស័ក_ឆស័ក_សប្តស័ក_អដ្ឋស័ក_នព្វស័ក\".split(\"_\"),\n    preparse: function (string) {\n      return string.replace(/[១២៣៤៥៦៧៨៩០]/g, function (match) {\n        return numberMap[match];\n      });\n    },\n    postformat: function (string) {\n      return string.replace(/\\d/g, function (match) {\n        return symbolMap[match];\n      });\n    }\n  };\n\n})));\n", ";(function (global, factory) {\n  if (typeof exports === 'object' && typeof module !== 'undefined') {\n    module.exports = factory()\n  } else {\n    if (typeof define === 'function' && define.amd) {\n      define(factory)\n    } else {\n      global.momentkhConstant = factory()\n    }\n  }\n}(this, (function () {\n  'use strict';\n\n  const LunarMonths = {};\n  \"មិគសិរ_បុស្ស_មាឃ_ផល្គុន_ចេត្រ_ពិសាខ_ជេស្ឋ_អាសាឍ_ស្រាពណ៍_ភទ្របទ_អស្សុជ_កក្ដិក_បឋមាសាឍ_ទុតិយាសាឍ\".split(\"_\").forEach((month, index) => {\n    LunarMonths[month] = index\n  });\n\n  const SolarMonth = {};\n  'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_').forEach((month, index) => {\n    SolarMonth[month] = index\n  });\n\n  const AnimalYear = {};\n  \"ជូត_ឆ្លូវ_ខាល_ថោះ_រោង_ម្សាញ់_មមីរ_មមែ_វក_រកា_ច_កុរ\".split(\"_\").forEach((year, index) => {\n    AnimalYear[year] = index\n  });\n\n  const EraYear = {};\n  \"សំរឹទ្ធិស័ក_ឯកស័ក_ទោស័ក_ត្រីស័ក_ចត្វាស័ក_បញ្ចស័ក_ឆស័ក_សប្តស័ក_អដ្ឋស័ក_នព្វស័ក\".split(\"_\").forEach((year, index) => {\n    EraYear[year] = index\n  });\n\n  const MoonStatus = {};\n  \"កើត_រោច\".split(\"_\").forEach((moon, index) => {\n    MoonStatus[moon] = index\n  });\n\n  // ឆ្នាំលើកលែងមួយចំនួនដែលខុសពីការគណនា\n  const khNewYearMoments = {\n    '1879' : '12-04-1879 11:36',\n    '1897' : '13-04-1897 02:00',\n    '2011' : '14-04-2011 13:12',\n    '2012' : '14-04-2012 19:11',\n    '2013' : '14-04-2013 02:12',\n    '2014' : '14-04-2014 08:07',\n    '2015' : '14-04-2015 14:02',\n  }\n\n  return {\n    LunarMonths,\n    SolarMonth,\n    AnimalYear,\n    EraYear,\n    MoonStatus,\n    khNewYearMoments,\n  }\n})));\n", "/**\n * @see http://www.dahlina.com/education/khmer_new_year_time.html?fbclid=IwAR0Eq6US-F0LfplMjKzmiRn7rvPgi31i74Wpv4mNhU034mzdyj-3hYrCA8w\n * @param jsYear\n * @returns {{harkun, kromathopol, avaman, bodithey, has366day: *, isAthikameas: *, isChantreathimeas: *, jesthHas30: *, dayLerngSak: number, lunarDateLerngSak: {day: number, month: *}}}\n */\n\n;(function (global, factory) {\n  if (typeof exports === 'object' && typeof module !== 'undefined') {\n    module.exports = factory\n  } else {\n    if (typeof define === 'function' && define.amd) {\n      define(factory)\n    } else {\n      global.getSoriyatraLerngSak = factory\n    }\n  }\n}(this, (function (jsYear) {\n  'use strict';\n\n  return (function (jsYear) {\n\n    let LunarMonths;\n\n    if (typeof require === 'function') {\n      LunarMonths = require('./constant').LunarMonths;\n    } else {\n      if (!window.momentkhConstant) {\n        throw \"Please import [MOMENTKH]/constant.js to your project\"\n      } else {\n        LunarMonths = window.momentkhConstant.LunarMonths;\n      }\n    }\n\n    /**\n     * គណនា ហារគុន Kromathopol អវមាន និង បូតិថី\n     * @param jsYear\n     * @returns {{bodithey: number, avaman: number, kromathopol: number, harkun: number}}\n     */\n    function getInfo(jsYear) {\n      let h = 292207 * jsYear + 373;\n      let harkun = Math.floor(h / 800) + 1;\n      let kromathopol = 800 - (h % 800);\n\n      let a = 11 * harkun + 650;\n      let avaman = a % 692;\n      let bodithey = (harkun + Math.floor((a / 692))) % 30;\n      return {\n        harkun,\n        kromathopol,\n        avaman,\n        bodithey\n      }\n    }\n\n    let info = getInfo(jsYear);\n\n    /**\n     * ឆ្នាំចុល្លសករាជដែលមាន៣៦៦ថ្ងៃ\n     * @param jsYear\n     * @returns {boolean}\n     */\n    function getHas366day(jsYear) {\n      let infoOfYear = getInfo(jsYear);\n      return infoOfYear.kromathopol <= 207;\n    }\n\n    /**\n     * រកឆ្នាំអធិកមាស\n     * @param jsYear\n     * @returns {boolean}\n     */\n    function getIsAthikameas(jsYear) {\n      let infoOfYear = getInfo(jsYear);\n      let infoOfNextYear = getInfo(jsYear + 1);\n      return (!(infoOfYear.bodithey === 25 && infoOfNextYear.bodithey === 5) &&\n        (infoOfYear.bodithey > 24 ||\n          infoOfYear.bodithey < 6 ||\n          (infoOfYear.bodithey === 24 &&\n            infoOfNextYear.bodithey === 6\n          )\n        )\n      );\n    }\n\n    /**\n     * រកឆ្នាំចន្ទ្រាធិមាស\n     * @param jsYear\n     * @returns {boolean}\n     */\n    function getIsChantreathimeas(jsYear) {\n      let infoOfYear = getInfo(jsYear);\n      let infoOfNextYear = getInfo(jsYear + 1);\n      let infoOfPreviousYear = getInfo(jsYear - 1);\n      let has366day = getHas366day(jsYear);\n      return ((has366day && infoOfYear.avaman < 127) ||\n        (!(infoOfYear.avaman === 137 &&\n            infoOfNextYear.avaman === 0) &&\n          ((!has366day &&\n              infoOfYear.avaman < 138) ||\n            (infoOfPreviousYear.avaman === 137 &&\n              infoOfYear.avaman === 0\n            )\n          )\n        )\n      );\n    }\n\n    let has366day = getHas366day(jsYear);\n    let isAthikameas = getIsAthikameas(jsYear)\n    let isChantreathimeas = getIsChantreathimeas(jsYear)\n\n    /**\n     * ឆែកមើលថាជាឆ្នាំដែលខែជេស្ឋមាន៣០ថ្ងៃឬទេ\n     * @type {boolean}\n     */\n    let jesthHas30 = (function () {\n      let tmp = isChantreathimeas;\n      if (isAthikameas && isChantreathimeas) {\n        tmp = false;\n      }\n      if (!isChantreathimeas && getIsAthikameas(jsYear - 1) && getIsChantreathimeas(jsYear - 1)) {\n        tmp = true;\n      }\n      return tmp;\n    })();\n\n    /**\n     * រកមើលថាតើថ្ងៃឡើងស័កចំថ្ងៃអ្វី\n     * @type {number}\n     */\n    let dayLerngSak = (info.harkun - 2) % 7;\n\n    /**\n     * គណនារកថ្ងៃឡើងស័ក\n     * @type {{month, day}}\n     */\n    let lunarDateLerngSak = (function () {\n      let bodithey = info.bodithey;\n      if (getIsAthikameas(jsYear - 1) && getIsChantreathimeas(jsYear - 1)) {\n        bodithey = (bodithey + 1) % 30;\n      }\n      return {\n        day: bodithey >= 6 ? bodithey - 1 : bodithey,\n        month: bodithey >= 6 ? LunarMonths['ចេត្រ'] : LunarMonths['ពិសាខ']\n      };\n    })();\n\n    function getSunInfo(sotin) {  // សុទិន\n      let infoOfPreviousYear = getInfo(jsYear - 1);\n      // ១ រាសី = ៣០ អង្សា\n      // ១ អង្សា = ៦០ លិប្ដា\n      let sunAverageAsLibda = (function () {  // មធ្យមព្រះអាទិត្យ គិតជាលិប្ដា\n        let r2 = 800 * sotin + infoOfPreviousYear.kromathopol;\n        let reasey = Math.floor(r2 / 24350); // រាសី\n        let r3 = r2 % 24350;\n        let angsar = Math.floor(r3 / 811); // អង្សា\n        let r4 = r3 % 811;\n        let l1 = Math.floor(r4 / 14);\n        let libda = l1 - 3; // លិប្ដា\n        return (30 * 60 * reasey) + (60 * angsar) + libda;\n      })();\n\n      let leftOver = (function () {\n        let s1 = ((30 * 60 * 2) + (60 * 20));\n        let leftOver = sunAverageAsLibda - s1; // មធ្យមព្រះអាទិត្យ - R2.A20.L0\n        if (sunAverageAsLibda < s1) { // បើតូចជាង ខ្ចី ១២ រាសី\n          leftOver += (30 * 60 * 12)\n        }\n        return leftOver;\n      })();\n\n      let kaen = (function () {\n        return Math.floor(leftOver / (30 * 60));\n      })();\n\n      let lastLeftOver = (function () {\n        let rs = -1;\n        if ([0, 1, 2].includes(kaen)) {\n          rs = kaen;\n        } else if ([3, 4, 5].includes(kaen)) {\n          rs = (30 * 60 * 6) - leftOver; // R6.A0.L0 - leftover\n        } else if ([6, 7, 8].includes(kaen)) {\n          rs = leftOver - (30 * 60 * 6); // leftover - R6.A0.L0\n        } else if ([9, 10, 11].includes(kaen)) {\n          rs = ((30 * 60 * 11) + (60 * 29) + 60) - leftOver; // R11.A29.L60 - leftover\n        }\n        return {\n          reasey: Math.floor(rs / (30 * 60)),\n          angsar: Math.floor((rs % (30 * 60)) / (60)),\n          libda: rs % 60\n        };\n      })();\n\n      let [khan, pouichalip] = (function () { // ខណ្ឌ និង pouichalip\n        if (lastLeftOver.angsar >= 15) {\n          return [\n            2 * lastLeftOver.reasey + 1,\n            60 * (lastLeftOver.angsar - 15) + lastLeftOver.libda\n          ];\n        } else {\n          return [\n            2 * lastLeftOver.reasey,\n            60 * lastLeftOver.angsar + lastLeftOver.libda\n          ];\n        }\n      })();\n\n      let phol = (function () { // phol\n        const chhayaSun = function (khan) {\n          let multiplicities = [35, 32, 27, 22, 13, 5];\n          let chhayas = [0, 35, 67, 94, 116, 129];\n          switch (khan) {\n            case 0:\n            case 1:\n            case 2:\n            case 3:\n            case 4:\n            case 5:\n              return {\n                multiplicity: multiplicities[khan],\n                chhaya: chhayas[khan]\n              }\n            default:\n              return {\n                chhaya: 134\n              }\n          }\n        }\n\n        let val = chhayaSun(khan);\n        let q = Math.floor((pouichalip * val.multiplicity) / 900);\n        return {\n          reasey: 0,\n          angsar: Math.floor((q + val.chhaya) / 60),\n          libda: (q + val.chhaya) % 60\n        }\n      })();\n\n      let sunInaugurationAsLibda = (function () { // សម្ពោធព្រះអាទិត្យ\n        let pholAsLibda = (30 * 60 * phol.reasey) + (60 * phol.angsar) + phol.libda;\n        if (kaen <= 5) {\n          return sunAverageAsLibda - pholAsLibda;\n        } else {\n          return sunAverageAsLibda + pholAsLibda;\n        }\n      })();\n\n      return {\n        sunAverageAsLibda,\n        khan,\n        pouichalip,\n        phol,\n        sunInaugurationAsLibda\n      }\n    }\n\n    let newYearsDaySotins = (function () { // ចំនួនថ្ងៃវ័នបត\n      let sotins = getHas366day(jsYear - 1) ? [363, 364, 365, 366] : [362, 363, 364, 365]; // សុទិន\n      return sotins.map(function (sotin) {\n        let sunInfo = getSunInfo(sotin);\n        return {\n          sotin: sotin,\n          reasey: Math.floor(sunInfo.sunInaugurationAsLibda / (30 * 60)),\n          angsar: Math.floor((sunInfo.sunInaugurationAsLibda % (30 * 60)) / (60)), // អង្សាស្មើសូន្យ គីជាថ្ងៃចូលឆ្នាំ, មួយ ឬ ពីរ ថ្ងៃបន្ទាប់ជាថ្ងៃវ័នបត ហើយ ថ្ងៃចុងក្រោយគីឡើងស័ក\n          libda: sunInfo.sunInaugurationAsLibda % 60,\n        }\n      })\n    })();\n\n    let timeOfNewYear = (function () {\n      let sotinNewYear = newYearsDaySotins.filter(function (sotin) {\n        return sotin.angsar === 0;\n      });\n      if (sotinNewYear.length > 0) {\n        let libda = sotinNewYear[0].libda; // ២៤ ម៉ោង មាន ៦០លិប្ដា\n        let minutes = (24 * 60) - (libda * 24)\n        return {\n          hour: Math.floor(minutes / 60),\n          minute: minutes % 60\n        }\n      } else {\n        throw Error('Plugin is facing wrong calculation on new years hour. No sotin with angsar = 0');\n      }\n    })();\n\n    return {\n      harkun: info.harkun,\n      kromathopol: info.kromathopol,\n      avaman: info.avaman,\n      bodithey: info.bodithey,\n      has366day, // សុរិយគតិខ្មែរ\n      isAthikameas, // 13 months\n      isChantreathimeas, // 30ថ្ងៃនៅខែជេស្ឋ\n      jesthHas30, // ខែជេស្ឋមាន៣០ថ្ងៃ\n      dayLerngSak, // ថ្ងៃឡើងស័ក ច័ន្ទ អង្គារ ...\n      lunarDateLerngSak, // ថ្ងៃទី ខែ ឡើងស័ក\n      newYearsDaySotins, // សុទិនសម្រាប់គណនាថ្ងៃចូលឆ្នាំ ថ្ងៃវ័នបត និង ថ្ងៃឡើងស័ក\n      timeOfNewYear // ម៉ោងទេវតាចុះ\n    }\n  })(jsYear);\n})));\n", "/**\n * be : Buddhist Era\n * ad : Anno Domini\n *\n * The following calculation is from \"Pratitin Soryakkatik-Chankatik 1900-1999\" by Mr. Roath Kim Soeun.\n * It illustrates how to determine if a given year is a normal year, leap-day year, or leap-month year.\n * The calculation can use different eras including Buddhist Era, Jola Sakaraj but not AD.\n * Here we choose to use only Buddhist Era.\n *\n * @credit http://www.cam-cc.org\n * @ref http://www.dahlina.com/education/khmer_new_year_time.html?fbclid=IwAR3lVUvvd4bM6QD635djBpgWt_VDE9KFf4zfqK02RiagIVvRtDMkY2TNWMo\n */\n\n// const Moment = require('moment');\nfunction getLocaleConfig() {\n  if (typeof require === 'function') {\n    return require('./locale/km')\n  } else {\n    if (!this.momentkhLocales) {\n      throw \"Please import [MOMENTKH]/locale/km.js to your project\"\n    } else {\n      return this.momentkhLocales['km']\n    }\n  }\n}\n\nlet config = getLocaleConfig();\n\nlet constant, LunarMonths, SolarMonth, MoonStatus, khNewYearMoments;\nif (typeof require === 'function') {\n  constant = require('./constant')\n} else {\n  if (!this.momentkhConstant)  {\n    throw \"Please import [MOMENTKH]/constant.js to your project\"\n  } else {\n    constant = this.momentkhConstant\n  }\n}\nLunarMonths = constant.LunarMonths\nSolarMonth = constant.SolarMonth\nMoonStatus = constant.MoonStatus\nkhNewYearMoments = constant.khNewYearMoments\n\n;(function (global, factory) {\n  if (typeof exports === 'object' && typeof module !== 'undefined') {\n    module.exports = factory\n  } else {\n    if (typeof define === 'function' && define.amd) {\n      define(factory)\n    } else {\n      global.momentkh = factory\n    }\n  }\n}(this, (function (Moment) {\n  'use strict';\n\n  Moment.khNewYearMoments = khNewYearMoments\n\n  /**\n   * Bodithey: បូតិថី\n   * Bodithey determines if a given beYear is a leap-month year. Given year target year in Buddhist Era\n   * @return Number (0-29)\n   */\n  function getBodithey(beYear) {\n    let ahk = getAharkun(beYear);\n    let avml = Math.floor((11 * ahk + 25) / 692);\n    let m = avml + ahk + 29;\n    return (m % 30);\n  }\n\n  /**\n   * Avoman: អាវមាន\n   * Avoman determines if a given year is a leap-day year. Given a year in Buddhist Era as denoted as adYear\n   * @param beYear (0 - 691)\n   */\n  function getAvoman(beYear) {\n    let ahk = getAharkun(beYear);\n    let avm = (11 * ahk + 25) % 692;\n    return avm;\n  }\n\n  /**\n   * Aharkun: អាហារគុណ ឬ ហារគុណ\n   * Aharkun is used for Avoman and Bodithey calculation below. Given adYear as a target year in Buddhist Era\n   * @param beYear\n   * @returns {number}\n   */\n  function getAharkun(beYear) {\n    let t = beYear * 292207 + 499;\n    let ahk = Math.floor(t / 800) + 4;\n    return ahk;\n  }\n\n  /**\n   * Kromathupul\n   * @param beYear\n   * @returns {number} (1-800)\n   */\n  function kromthupul(beYear) {\n    let ah = getAharkunMod(beYear);\n    let krom = 800 - ah;\n    return krom;\n  }\n\n  /**\n   * isKhmerSolarLeap\n   * @param beYear\n   * @returns {number}\n   */\n  function isKhmerSolarLeap(beYear) {\n    let krom = kromthupul(beYear);\n    if (krom <= 207)\n      return 1;\n    else\n      return 0;\n  }\n\n  /**\n   * getAkhakunMod\n   * @param beYear\n   * @returns {number}\n   */\n  function getAharkunMod(beYear) {\n    let t = beYear * 292207 + 499;\n    let ahkmod = t % 800;\n    return ahkmod;\n  }\n\n  /**\n   * * Regular if year has 30 day\n   * * leap month if year has 13 months\n   * * leap day if Jesth month of the year has 1 extra day\n   * * leap day and month: both of them\n   * @param beYear\n   * @returns {number} return 0:regular, 1:leap month, 2:leap day, 3:leap day and month\n   */\n  function getBoditheyLeap(beYear) {\n    let result = 0;\n    let avoman = getAvoman(beYear);\n    let bodithey = getBodithey(beYear);\n\n    // check bodithey leap month\n    let boditheyLeap = 0;\n    if (bodithey >= 25 || bodithey <= 5) {\n      boditheyLeap = 1;\n    }\n    // check for avoman leap-day based on gregorian leap\n    let avomanLeap = 0;\n    if (isKhmerSolarLeap(beYear)) {\n      if (avoman <= 126)\n        avomanLeap = 1;\n    } else {\n      if (avoman <= 137) {\n        // check for avoman case 137/0, 137 must be normal year (p.26)\n        if (getAvoman(beYear + 1) === 0) {\n          avomanLeap = 0;\n        } else {\n          avomanLeap = 1;\n        }\n      }\n    }\n\n    // case of 25/5 consecutively\n    // only bodithey 5 can be leap-month, so set bodithey 25 to none\n    if (bodithey === 25) {\n      let nextBodithey = getBodithey(beYear + 1);\n      if (nextBodithey === 5) {\n        boditheyLeap = 0;\n      }\n    }\n\n    // case of 24/6 consecutively, 24 must be leap-month\n    if (bodithey == 24) {\n      let nextBodithey = getBodithey(beYear + 1);\n      if (nextBodithey == 6) {\n        boditheyLeap = 1;\n      }\n    }\n\n    // format leap result (0:regular, 1:month, 2:day, 3:both)\n    if (boditheyLeap === 1 && avomanLeap === 1) {\n      result = 3;\n    } else if (boditheyLeap === 1) {\n      result = 1;\n    } else if (avomanLeap === 1) {\n      result = 2;\n    } else {\n      result = 0;\n    }\n\n    return result;\n  }\n\n  // return 0:regular, 1:leap month, 2:leap day (no leap month and day together)\n  /**\n   * bodithey leap can be both leap-day and leap-month but following the khmer calendar rule, they can't be together on the same year, so leap day must be delayed to next year\n   * @param beYear\n   * @returns {number}\n   */\n  function getProtetinLeap(beYear) {\n    let b = getBoditheyLeap(beYear);\n    if (b === 3) {\n      return 1;\n    }\n    if (b === 2 || b === 1) {\n      return b;\n    }\n    // case of previous year is 3\n    if (getBoditheyLeap(beYear - 1) === 3) {\n      return 2;\n    }\n    // normal case\n    return 0;\n  }\n\n  /**\n   * Maximum number of day in Khmer Month\n   * @param beMonth\n   * @param beYear\n   * @returns {number}\n   */\n  function getNumberOfDayInKhmerMonth(beMonth, beYear) {\n    if (beMonth === LunarMonths['ជេស្ឋ'] && isKhmerLeapDay(beYear)) {\n      return 30;\n    }\n    if (beMonth === LunarMonths['បឋមាសាឍ'] || beMonth === LunarMonths['ទុតិយាសាឍ']) {\n      return 30;\n    }\n    // មិគសិរ : 29 , បុស្ស : 30 , មាឃ : 29 .. 30 .. 29 ..30 .....\n    return beMonth % 2 === 0 ? 29 : 30;\n  }\n\n  /**\n   * Get number of day in Khmer year\n   * @param beYear\n   * @returns {number}\n   */\n  function getNumerOfDayInKhmerYear(beYear) {\n    if (isKhmerLeapMonth(beYear)) {\n      return 384;\n    } else if (isKhmerLeapDay(beYear)) {\n      return 355;\n    } else {\n      return 354;\n    }\n  }\n\n  /**\n   * Get number of day in Gregorian year\n   * @param adYear\n   * @returns {number}\n   */\n  function getNumberOfDayInGregorianYear(adYear) {\n    if (isGregorianLeap(adYear)) {\n      return 366;\n    } else {\n      return 365;\n    }\n  }\n\n  /**\n   * A year with an extra month is called Adhikameas (អធិកមាស). This year has 384 days.\n   * @param beYear\n   * @returns {boolean}\n   */\n  function isKhmerLeapMonth(beYear) {\n    return getProtetinLeap(beYear) === 1\n  }\n\n  /**\n   * A year with an extra day is called Chhantrea Thimeas (ចន្ទ្រាធិមាស) or Adhikavereak (អធិកវារៈ). This year has 355 days.\n   * @param beYear\n   * @returns {boolean}\n   */\n  function isKhmerLeapDay(beYear) {\n    return getProtetinLeap(beYear) === 2\n  }\n\n  /**\n   * Gregorian Leap\n   * @param adYear\n   * @returns {boolean}\n   */\n  function isGregorianLeap(adYear) {\n    if (adYear % 4 === 0 && adYear % 100 !== 0 || adYear % 400 === 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * រកថ្ងៃវិសាខបូជា\n   * ថ្ងៃដាច់ឆ្នាំពុទ្ធសករាជ\n   */\n  function getVisakhaBochea(gregorianYear) {\n    var date = Moment('1/1/' + gregorianYear, 'D/M/YYYY')\n    for (var i = 0; i < 365; i++) {\n      var lunarDate = findLunarDate(date);\n      if (lunarDate.month == LunarMonths['ពិសាខ'] && lunarDate.day == 14) {\n        return date\n      }\n      date.add(1, 'day')\n    }\n    throw 'Cannot find Visakhabochea day. Please report this bug.';\n  }\n\n  /**\n   * Buddhist Era\n   * ថ្ងៃឆ្លងឆ្នាំ គឺ ១ រោច ខែពិសាខ\n   * @ref http://news.sabay.com.kh/article/1039620\n   * @summary: ឯកឧត្តម សេង សុមុនី អ្នកនាំពាក្យ​ក្រ​សួង​ធម្មការ និង​សាសនា​ឲ្យ​Sabay ដឹង​ថា​នៅ​ប្រ​ទេស​កម្ពុជា​ការ​ឆ្លង​ចូល​ពុទ្ធសករាជថ្មី​គឺ​កំណត់​យក​នៅ​ថ្ងៃព្រះ​ពុទ្ធយាងចូល​និព្វាន ពោល​គឺ​នៅ​ថ្ងៃ​១រោច ខែពិសាខ។\n   * @param moment\n   * @returns {*}\n   */\n  function getBEYear(moment) {\n    if (moment.diff(getVisakhaBochea(moment.year())) > 0) {\n      return moment.year() + 544;\n    } else {\n      return moment.year() + 543;\n    }\n  }\n\n  /**\n   * Due to recursive problem, I need to calculate the BE based on new year's day\n   * This won't be displayed on final result, it is used to find number of day in year,\n   * It won't affect the result because on ខែចេត្រ និង ខែពិសាខ, number of days is the same every year\n   * ពីព្រោះចូលឆ្នាំតែងតែចំខែចេត្រ​ ឬ ពិសាខ\n   * @param moment\n   * @returns {*}\n   */\n  function getMaybeBEYear(moment) {\n    if (moment.month() + 1 <= SolarMonth['មេសា'] + 1) {\n      return moment.year() + 543;\n    } else {\n      return moment.year() + 544;\n    }\n  }\n\n  /**\n   * Moha Sakaraj\n   * @param adYear\n   * @returns {number}\n   */\n  function getMohaSakarajYear(adYear) {\n    return adYear - 77;\n  }\n\n  /**\n   * Jolak Sakaraj\n   * @param beYear\n   * @returns {number}\n   */\n  function getJolakSakarajYear(moment) {\n    let gregorianYear = moment.year();\n    let newYearMoment = getKhNewYearMoment(gregorianYear);\n    if (moment.diff(newYearMoment) < 0) {\n      return gregorianYear + 543 - 1182\n    } else {\n      return gregorianYear + 544 - 1182\n    }\n  }\n\n  /**\n   * ១កើត ៤កើត ២រោច ១៤រោច ...\n   * @param day 1-30\n   * @returns {{count: number, moonStatus: number}}\n   */\n  function getKhmerLunarDay(day) {\n    return {\n      count: (day % 15) + 1,\n      moonStatus: day > 14 ? MoonStatus['រោច'] : MoonStatus['កើត']\n    }\n  }\n\n  /**\n   * Turn be year to animal year\n   * @param beYear\n   * @returns {number}\n   */\n  function getAnimalYear(moment) {\n    let gregorianYear = moment.year();\n    let newYearMoment = getKhNewYearMoment(gregorianYear);\n    if (moment.diff(newYearMoment) < 0) {\n      return (gregorianYear + 543 + 4) % 12\n    } else {\n      return (gregorianYear + 544 + 4) % 12\n    }\n  }\n\n  /**\n   * Khmer date format handler\n   * @param day\n   * @param month\n   * @param moment\n   * @param format\n   * @returns {*}\n   */\n  function formatKhmerDate({day, month, moment}, format) {\n    if (format === null || format === undefined) {\n      // Default date format\n      let dayOfWeek = moment.day();\n      let moonDay = getKhmerLunarDay(day);\n      let beYear = getBEYear(moment);\n      let animalYear = getAnimalYear(moment);\n      let eraYear = getJolakSakarajYear(moment) % 10;\n      return config.postformat(`ថ្ងៃ${config.weekdays[dayOfWeek]} ${moonDay.count}${config.moonStatus[moonDay.moonStatus]} ខែ${config.lunarMonths[month]} ឆ្នាំ${config.animalYear[animalYear]} ${config.eraYear[eraYear]} ពុទ្ធសករាជ ${beYear}`);\n    } else if (typeof format === 'string') {\n      // Follow the format\n      let formatRule = {\n        'W': function () { // Day of week\n          let dayOfWeek = moment.day();\n          return config.weekdays[dayOfWeek]\n        },\n        'w': function () { // Day of week\n          let dayOfWeek = moment.day();\n          return config.weekdaysShort[dayOfWeek]\n        },\n        'd': function () { // no determine digit\n          let moonDay = getKhmerLunarDay(day);\n          return moonDay.count;\n        },\n        'D': function () { // minimum 2 digits\n          let moonDay = getKhmerLunarDay(day);\n          return ('' + moonDay.count).length === 1 ? '0' + moonDay.count : moonDay.count;\n        },\n        'n': function () {\n          let moonDay = getKhmerLunarDay(day);\n          return config.moonStatusShort[moonDay.moonStatus]\n        },\n        'N': function () {\n          let moonDay = getKhmerLunarDay(day);\n          return config.moonStatus[moonDay.moonStatus]\n        },\n        'o': function () {\n          return config.moonDays[day];\n        },\n        'm': function () {\n          return config.lunarMonths[month];\n        },\n        'M': function () {\n          return config.months[moment.month()];\n        },\n        'a': function () {\n          let animalYear = getAnimalYear(moment);\n          return config.animalYear[animalYear];\n        },\n        'e': function () {\n          let eraYear = getJolakSakarajYear(moment) % 10;\n          return config.eraYear[eraYear];\n        },\n        'b': function () {\n          return getBEYear(moment);\n        },\n        'c': function () {\n          return moment.year();\n        },\n        'j': function () {\n          return getJolakSakarajYear(moment);\n        }\n      }\n\n      return config.postformat(format.replace(new RegExp(Object.keys(formatRule).join('|'), 'g'), function (matched) {\n        return formatRule[matched]();\n      }));\n\n    }\n    throw Error(format + ' is not a valid date format.');\n  }\n\n  /**\n   * Read Khmer lunar date\n   * @param params : String (2) (input and format)\n   * @or @param Object {ថ្ងៃ: ..., កើត: ..., ខែ: ..., ពស: ...}\n   * @return Moment\n   */\n  function readLunarDate(...params) {\n    console.log('Now working yet')\n  }\n\n  /**\n   * Next month of the month\n   */\n  function nextMonthOf(khmerMonth, BEYear) {\n    switch (khmerMonth) {\n    case LunarMonths['មិគសិរ']:\n      return LunarMonths['បុស្ស'];\n    case LunarMonths['បុស្ស']:\n      return LunarMonths['មាឃ'];\n    case LunarMonths['មាឃ']:\n      return LunarMonths['ផល្គុន'];\n    case LunarMonths['ផល្គុន']:\n      return LunarMonths['ចេត្រ'];\n    case LunarMonths['ចេត្រ']:\n      return LunarMonths['ពិសាខ'];\n    case LunarMonths['ពិសាខ']:\n      return LunarMonths['ជេស្ឋ'];\n    case LunarMonths['ជេស្ឋ']: {\n      if (isKhmerLeapMonth(BEYear)) {\n        return LunarMonths['បឋមាសាឍ']\n      } else {\n        return LunarMonths['អាសាឍ']\n      }\n    }\n    case LunarMonths['អាសាឍ']:\n      return LunarMonths['ស្រាពណ៍'];\n    case LunarMonths['ស្រាពណ៍']:\n      return LunarMonths['ភទ្របទ'];\n    case LunarMonths['ភទ្របទ']:\n      return LunarMonths['អស្សុជ'];\n    case LunarMonths['អស្សុជ']:\n      return LunarMonths['កក្ដិក'];\n    case LunarMonths['កក្ដិក']:\n      return LunarMonths['មិគសិរ'];\n    case LunarMonths['បឋមាសាឍ']:\n      return LunarMonths['ទុតិយាសាឍ'];\n    case LunarMonths['ទុតិយាសាឍ']:\n      return LunarMonths['ស្រាពណ៍'];\n    default:\n      throw Error('Plugin is facing wrong calculation (Invalid month)');\n    }\n  }\n\n  /**\n   * Calculate date from momoentjs to Khmer date\n   * @param target : Moment\n   * @returns {{day: number, month: *, epochMoved: (*|moment.Moment)}}\n   */\n  function findLunarDate(target) {\n    /**\n     * Epoch Date: January 1, 1900\n     */\n    let epochMoment = Moment('1/1/1900', 'D/M/YYYY')\n    let khmerMonth = LunarMonths['បុស្ស'];\n    let khmerDay = 0; // 0 - 29 ១កើត ... ១៥កើត ១រោច ...១៤រោច (១៥រោច)\n\n    let differentFromEpoch = target.diff(epochMoment)\n\n    // Find nearest year epoch\n    if (differentFromEpoch > 0) {\n      while (Moment.duration(target.diff(epochMoment), 'milliseconds').asDays() > getNumerOfDayInKhmerYear(getMaybeBEYear(epochMoment.clone().add(1, 'year')))) {\n        epochMoment.add(getNumerOfDayInKhmerYear(getMaybeBEYear(epochMoment.clone().add(1, 'year'))), 'day')\n      }\n    } else {\n      do {\n        epochMoment.subtract(getNumerOfDayInKhmerYear(getMaybeBEYear(epochMoment)), 'day')\n      } while (Moment.duration(epochMoment.diff(target), 'milliseconds').asDays() > 0)\n    }\n\n    // Move epoch month\n    while (Moment.duration(target.diff(epochMoment), 'milliseconds').asDays() > getNumberOfDayInKhmerMonth(khmerMonth, getMaybeBEYear(epochMoment))) {\n      epochMoment.add(getNumberOfDayInKhmerMonth(khmerMonth, getMaybeBEYear(epochMoment)), 'day');\n      khmerMonth = nextMonthOf(khmerMonth, getMaybeBEYear(epochMoment))\n    }\n\n    khmerDay += Math.floor(Moment.duration(target.diff(epochMoment), 'milliseconds').asDays());\n\n    /**\n     * Fix result display 15 រោច ខែ ជេស្ឋ នៅថ្ងៃ ១ កើតខែបឋមាសាធ\n     * ករណី ខែជេស្ឋមានតែ ២៩ ថ្ងៃ តែលទ្ធផលបង្ហាញ ១៥រោច ខែជេស្ឋ\n     */\n     const totalDaysOfTheMonth = getNumberOfDayInKhmerMonth(khmerMonth, getMaybeBEYear(target))\n    if (totalDaysOfTheMonth <= khmerDay) {\n      khmerDay = khmerDay % totalDaysOfTheMonth\n      khmerMonth = nextMonthOf(khmerMonth, getMaybeBEYear(epochMoment))\n    }\n\n    epochMoment.add(Moment.duration(target.diff(epochMoment), 'milliseconds').asDays(), 'day');\n\n    return {\n      day: khmerDay,\n      month: khmerMonth,\n      epochMoved: epochMoment\n    }\n  }\n\n  /**\n   * Return khmer lunar date\n   * @param format String (wanted format)\n   * @return String\n   * @or @param Array (wanted field) [ថ្ងៃ ថ្ងៃទី កើត/រោច ខែចន្ទគតិ ខែសុរិយគតិ ឆ្នាំសត្វ ឆ្នាំស័ក ពស គស ចស មស សីល]\n   * @return Object\n   */\n  function toLunarDate(format) {\n\n    let target = this.clone();\n\n    let result = findLunarDate(target);\n\n    return formatKhmerDate({\n      day: result.day,\n      month: result.month,\n      moment: target\n    }, format)\n  }\n\n  function getKhNewYearMoment(gregorianYear) {\n    if (Moment.khNewYearMoments[gregorianYear] !== undefined) {\n      // console.log('cache')\n      return Moment(Moment.khNewYearMoments[gregorianYear], 'DD-MM-YYYY H:m')\n    } else {\n      // console.log('calculate')\n      let getSoriyatraLerngSak;\n      if (typeof require === 'function') {\n        getSoriyatraLerngSak = require('./getSoriyatraLerngSak')\n      } else {\n        if (window) {\n          if (!window.getSoriyatraLerngSak) {\n            throw 'Please import [MOMENTKH]/getSoriyatraLerngSak.js to your project'\n          } else {\n            getSoriyatraLerngSak = window.getSoriyatraLerngSak\n          }\n        } else {\n          throw 'Cannot import getSoriyatraLerngSak. This is might not a nodejs environment or a browser'\n        }\n      }\n      // ពីគ្រិស្ដសករាជ ទៅ ចុល្លសករាជ\n      let jsYear = (gregorianYear + 544) - 1182;\n      let info = getSoriyatraLerngSak(jsYear);\n      // ចំនួនថ្ងៃចូលឆ្នាំ\n      let numberNewYearDay;\n      if (info.newYearsDaySotins[0].angsar === 0) { // ថ្ងៃ ខែ ឆ្នាំ ម៉ោង និង នាទី ចូលឆ្នាំ\n        // ចូលឆ្នាំ ៤ ថ្ងៃ\n        numberNewYearDay = 4;\n        // return Moment(`13-04-${gregorianYear} ${info.timeOfNewYear.hour}:${info.timeOfNewYear.minute}`, 'DD-MM-YYYY H:m')\n      } else {\n        // ចូលឆ្នាំ ៣ ថ្ងៃ\n        numberNewYearDay = 3;\n        // return Moment(`14-04-${gregorianYear} ${info.timeOfNewYear.hour}:${info.timeOfNewYear.minute}`, 'DD-MM-YYYY H:m')\n      }\n      let epochLerngSak = Moment(`17-04-${gregorianYear} ${info.timeOfNewYear.hour}:${info.timeOfNewYear.minute}`, 'DD-MM-YYYY H:m')\n      let khEpoch = findLunarDate(epochLerngSak)\n      let diffFromEpoch = (((khEpoch.month - 4) * 30) + khEpoch.day) -\n                          (((info.lunarDateLerngSak.month - 4) * 30) + info.lunarDateLerngSak.day)\n      let result = epochLerngSak.subtract(diffFromEpoch + numberNewYearDay - 1, 'day')\n      // Caching\n      Moment.khNewYearMoments[gregorianYear] = result.format('DD-MM-YYYY H:m')\n      return result\n    }\n  }\n\n  function khDay() {\n    let result = findLunarDate(this.clone());\n    return result.day;\n  }\n\n  function khMonth() {\n    let result = findLunarDate(this.clone());\n    return result.month;\n  }\n\n  function khYear() {\n    return getBEYear(this.clone());\n  }\n\n  Moment.readLunarDate =\n    Moment.khDate =\n      Moment.khdate =\n        readLunarDate;\n\n  Moment.fn.toLunarDate =\n    Moment.fn.toKhDate =\n      Moment.fn.tokhdate =\n        toLunarDate;\n\n  Moment.getKhNewYearMoment = getKhNewYearMoment;\n\n  Moment.fn.khDay = khDay;\n  Moment.fn.khMonth = khMonth;\n  Moment.fn.khYear = khYear;\n\n  return Moment;\n})));\n"],
  "mappings": ";;;;;;AAAA;AAAA;AAEC,KAAC,SAAU,QAAQ,SAAS;AAC3B,UAAI,OAAO,YAAY,YAAY,OAAO,WAAW,aAAa;AAChE,eAAO,UAAU,QAAQ;AAAA,MAC3B,OAAO;AACL,YAAI,OAAO,WAAW,cAAc,OAAO,KAAK;AAC9C,iBAAO,OAAO;AAAA,QAChB,OAAO;AACL,cAAI,CAAC,OAAO,iBAAiB;AAC3B,mBAAO,kBAAkB;AAAA,cACvB,MAAM,QAAQ;AAAA,YAChB;AAAA,UACF,OAAO;AACL,mBAAO,gBAAgB,IAAI,IAAI,QAAQ;AAAA,UACzC;AAAA,QACF;AAAA,MACF;AAAA,IACF,GAAE,SAAO,WAAY;AACnB;AAEA,UAAI,YAAY;AAAA,QACd,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACP,GAAG,YAAY;AAAA,QACb,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACP;AAEA,aAAO;AAAA,QACL,QAAQ,yEAAyE,MAAM,GAAG;AAAA,QAC1F,aAAa,yEAAyE,MAAM,GAAG;AAAA,QAC/F,UAAU,8DAA8D,MAAM,GAAG;AAAA,QACjF,YAAY,UAAU,MAAM,GAAG;AAAA,QAC/B,iBAAiB,MAAM,MAAM,GAAG;AAAA,QAChC,UAAU,iDAAiD,MAAM,GAAG;AAAA,QACpE,eAAe,oBAAoB,MAAM,GAAG;AAAA,QAC5C,aAAa,oBAAoB,MAAM,GAAG;AAAA,QAC1C,aAAa,iGAAiG,MAAM,GAAG;AAAA,QACvH,YAAY,oDAAoD,MAAM,GAAG;AAAA,QACzE,SAAS,gFAAgF,MAAM,GAAG;AAAA,QAClG,UAAU,SAAU,QAAQ;AAC1B,iBAAO,OAAO,QAAQ,iBAAiB,SAAU,OAAO;AACtD,mBAAO,UAAU,KAAK;AAAA,UACxB,CAAC;AAAA,QACH;AAAA,QACA,YAAY,SAAU,QAAQ;AAC5B,iBAAO,OAAO,QAAQ,OAAO,SAAU,OAAO;AAC5C,mBAAO,UAAU,KAAK;AAAA,UACxB,CAAC;AAAA,QACH;AAAA,MACF;AAAA,IAEF,CAAE;AAAA;AAAA;;;ACrEF;AAAA;AAAC,KAAC,SAAU,QAAQ,SAAS;AAC3B,UAAI,OAAO,YAAY,YAAY,OAAO,WAAW,aAAa;AAChE,eAAO,UAAU,QAAQ;AAAA,MAC3B,OAAO;AACL,YAAI,OAAO,WAAW,cAAc,OAAO,KAAK;AAC9C,iBAAO,OAAO;AAAA,QAChB,OAAO;AACL,iBAAO,mBAAmB,QAAQ;AAAA,QACpC;AAAA,MACF;AAAA,IACF,GAAE,SAAO,WAAY;AACnB;AAEA,YAAM,cAAc,CAAC;AACrB,uGAAiG,MAAM,GAAG,EAAE,QAAQ,CAAC,OAAO,UAAU;AACpI,oBAAY,KAAK,IAAI;AAAA,MACvB,CAAC;AAED,YAAM,aAAa,CAAC;AACpB,+EAAyE,MAAM,GAAG,EAAE,QAAQ,CAAC,OAAO,UAAU;AAC5G,mBAAW,KAAK,IAAI;AAAA,MACtB,CAAC;AAED,YAAM,aAAa,CAAC;AACpB,2DAAqD,MAAM,GAAG,EAAE,QAAQ,CAAC,MAAM,UAAU;AACvF,mBAAW,IAAI,IAAI;AAAA,MACrB,CAAC;AAED,YAAM,UAAU,CAAC;AACjB,sFAAgF,MAAM,GAAG,EAAE,QAAQ,CAAC,MAAM,UAAU;AAClH,gBAAQ,IAAI,IAAI;AAAA,MAClB,CAAC;AAED,YAAM,aAAa,CAAC;AACpB,gBAAU,MAAM,GAAG,EAAE,QAAQ,CAAC,MAAM,UAAU;AAC5C,mBAAW,IAAI,IAAI;AAAA,MACrB,CAAC;AAGD,YAAM,mBAAmB;AAAA,QACvB,QAAS;AAAA,QACT,QAAS;AAAA,QACT,QAAS;AAAA,QACT,QAAS;AAAA,QACT,QAAS;AAAA,QACT,QAAS;AAAA,QACT,QAAS;AAAA,MACX;AAEA,aAAO;AAAA,QACL;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF,CAAE;AAAA;AAAA;;;ACzDF;AAAA;AAMC,KAAC,SAAU,QAAQ,SAAS;AAC3B,UAAI,OAAO,YAAY,YAAY,OAAO,WAAW,aAAa;AAChE,eAAO,UAAU;AAAA,MACnB,OAAO;AACL,YAAI,OAAO,WAAW,cAAc,OAAO,KAAK;AAC9C,iBAAO,OAAO;AAAA,QAChB,OAAO;AACL,iBAAO,uBAAuB;AAAA,QAChC;AAAA,MACF;AAAA,IACF,GAAE,SAAO,SAAU,QAAQ;AACzB;AAEA,aAAQ,SAAUA,SAAQ;AAExB,YAAI;AAEJ,YAAI,OAAO,cAAY,YAAY;AACjC,wBAAc,mBAAsB;AAAA,QACtC,OAAO;AACL,cAAI,CAAC,OAAO,kBAAkB;AAC5B,kBAAM;AAAA,UACR,OAAO;AACL,0BAAc,OAAO,iBAAiB;AAAA,UACxC;AAAA,QACF;AAOA,iBAAS,QAAQA,SAAQ;AACvB,cAAI,IAAI,SAASA,UAAS;AAC1B,cAAI,SAAS,KAAK,MAAM,IAAI,GAAG,IAAI;AACnC,cAAI,cAAc,MAAO,IAAI;AAE7B,cAAI,IAAI,KAAK,SAAS;AACtB,cAAI,SAAS,IAAI;AACjB,cAAI,YAAY,SAAS,KAAK,MAAO,IAAI,GAAI,KAAK;AAClD,iBAAO;AAAA,YACL;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACF;AAAA,QACF;AAEA,YAAI,OAAO,QAAQA,OAAM;AAOzB,iBAAS,aAAaA,SAAQ;AAC5B,cAAI,aAAa,QAAQA,OAAM;AAC/B,iBAAO,WAAW,eAAe;AAAA,QACnC;AAOA,iBAAS,gBAAgBA,SAAQ;AAC/B,cAAI,aAAa,QAAQA,OAAM;AAC/B,cAAI,iBAAiB,QAAQA,UAAS,CAAC;AACvC,iBAAQ,EAAE,WAAW,aAAa,MAAM,eAAe,aAAa,OACjE,WAAW,WAAW,MACrB,WAAW,WAAW,KACrB,WAAW,aAAa,MACvB,eAAe,aAAa;AAAA,QAIpC;AAOA,iBAAS,qBAAqBA,SAAQ;AACpC,cAAI,aAAa,QAAQA,OAAM;AAC/B,cAAI,iBAAiB,QAAQA,UAAS,CAAC;AACvC,cAAI,qBAAqB,QAAQA,UAAS,CAAC;AAC3C,cAAIC,aAAY,aAAaD,OAAM;AACnC,iBAASC,cAAa,WAAW,SAAS,OACvC,EAAE,WAAW,WAAW,OACrB,eAAe,WAAW,OAC1B,CAACA,cACC,WAAW,SAAS,OACrB,mBAAmB,WAAW,OAC7B,WAAW,WAAW;AAAA,QAKhC;AAEA,YAAI,YAAY,aAAaD,OAAM;AACnC,YAAI,eAAe,gBAAgBA,OAAM;AACzC,YAAI,oBAAoB,qBAAqBA,OAAM;AAMnD,YAAI,aAAc,WAAY;AAC5B,cAAI,MAAM;AACV,cAAI,gBAAgB,mBAAmB;AACrC,kBAAM;AAAA,UACR;AACA,cAAI,CAAC,qBAAqB,gBAAgBA,UAAS,CAAC,KAAK,qBAAqBA,UAAS,CAAC,GAAG;AACzF,kBAAM;AAAA,UACR;AACA,iBAAO;AAAA,QACT,EAAG;AAMH,YAAI,eAAe,KAAK,SAAS,KAAK;AAMtC,YAAI,oBAAqB,WAAY;AACnC,cAAI,WAAW,KAAK;AACpB,cAAI,gBAAgBA,UAAS,CAAC,KAAK,qBAAqBA,UAAS,CAAC,GAAG;AACnE,wBAAY,WAAW,KAAK;AAAA,UAC9B;AACA,iBAAO;AAAA,YACL,KAAK,YAAY,IAAI,WAAW,IAAI;AAAA,YACpC,OAAO,YAAY,IAAI,YAAY,OAAO,IAAI,YAAY,OAAO;AAAA,UACnE;AAAA,QACF,EAAG;AAEH,iBAAS,WAAW,OAAO;AACzB,cAAI,qBAAqB,QAAQA,UAAS,CAAC;AAG3C,cAAI,oBAAqB,WAAY;AACnC,gBAAI,KAAK,MAAM,QAAQ,mBAAmB;AAC1C,gBAAI,SAAS,KAAK,MAAM,KAAK,KAAK;AAClC,gBAAI,KAAK,KAAK;AACd,gBAAI,SAAS,KAAK,MAAM,KAAK,GAAG;AAChC,gBAAI,KAAK,KAAK;AACd,gBAAI,KAAK,KAAK,MAAM,KAAK,EAAE;AAC3B,gBAAI,QAAQ,KAAK;AACjB,mBAAQ,KAAK,KAAK,SAAW,KAAK,SAAU;AAAA,UAC9C,EAAG;AAEH,cAAI,WAAY,WAAY;AAC1B,gBAAI,KAAO,KAAK,KAAK,IAAM,KAAK;AAChC,gBAAIE,YAAW,oBAAoB;AACnC,gBAAI,oBAAoB,IAAI;AAC1B,cAAAA,aAAa,KAAK,KAAK;AAAA,YACzB;AACA,mBAAOA;AAAA,UACT,EAAG;AAEH,cAAI,OAAQ,WAAY;AACtB,mBAAO,KAAK,MAAM,YAAY,KAAK,GAAG;AAAA,UACxC,EAAG;AAEH,cAAI,eAAgB,WAAY;AAC9B,gBAAI,KAAK;AACT,gBAAI,CAAC,GAAG,GAAG,CAAC,EAAE,SAAS,IAAI,GAAG;AAC5B,mBAAK;AAAA,YACP,WAAW,CAAC,GAAG,GAAG,CAAC,EAAE,SAAS,IAAI,GAAG;AACnC,mBAAM,KAAK,KAAK,IAAK;AAAA,YACvB,WAAW,CAAC,GAAG,GAAG,CAAC,EAAE,SAAS,IAAI,GAAG;AACnC,mBAAK,WAAY,KAAK,KAAK;AAAA,YAC7B,WAAW,CAAC,GAAG,IAAI,EAAE,EAAE,SAAS,IAAI,GAAG;AACrC,mBAAO,KAAK,KAAK,KAAO,KAAK,KAAM,KAAM;AAAA,YAC3C;AACA,mBAAO;AAAA,cACL,QAAQ,KAAK,MAAM,MAAM,KAAK,GAAG;AAAA,cACjC,QAAQ,KAAK,MAAO,MAAM,KAAK,MAAQ,EAAG;AAAA,cAC1C,OAAO,KAAK;AAAA,YACd;AAAA,UACF,EAAG;AAEH,cAAI,CAAC,MAAM,UAAU,IAAK,WAAY;AACpC,gBAAI,aAAa,UAAU,IAAI;AAC7B,qBAAO;AAAA,gBACL,IAAI,aAAa,SAAS;AAAA,gBAC1B,MAAM,aAAa,SAAS,MAAM,aAAa;AAAA,cACjD;AAAA,YACF,OAAO;AACL,qBAAO;AAAA,gBACL,IAAI,aAAa;AAAA,gBACjB,KAAK,aAAa,SAAS,aAAa;AAAA,cAC1C;AAAA,YACF;AAAA,UACF,EAAG;AAEH,cAAI,OAAQ,WAAY;AACtB,kBAAM,YAAY,SAAUC,OAAM;AAChC,kBAAI,iBAAiB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC;AAC3C,kBAAI,UAAU,CAAC,GAAG,IAAI,IAAI,IAAI,KAAK,GAAG;AACtC,sBAAQA,OAAM;AAAA,gBACZ,KAAK;AAAA,gBACL,KAAK;AAAA,gBACL,KAAK;AAAA,gBACL,KAAK;AAAA,gBACL,KAAK;AAAA,gBACL,KAAK;AACH,yBAAO;AAAA,oBACL,cAAc,eAAeA,KAAI;AAAA,oBACjC,QAAQ,QAAQA,KAAI;AAAA,kBACtB;AAAA,gBACF;AACE,yBAAO;AAAA,oBACL,QAAQ;AAAA,kBACV;AAAA,cACJ;AAAA,YACF;AAEA,gBAAI,MAAM,UAAU,IAAI;AACxB,gBAAI,IAAI,KAAK,MAAO,aAAa,IAAI,eAAgB,GAAG;AACxD,mBAAO;AAAA,cACL,QAAQ;AAAA,cACR,QAAQ,KAAK,OAAO,IAAI,IAAI,UAAU,EAAE;AAAA,cACxC,QAAQ,IAAI,IAAI,UAAU;AAAA,YAC5B;AAAA,UACF,EAAG;AAEH,cAAI,yBAA0B,WAAY;AACxC,gBAAI,cAAe,KAAK,KAAK,KAAK,SAAW,KAAK,KAAK,SAAU,KAAK;AACtE,gBAAI,QAAQ,GAAG;AACb,qBAAO,oBAAoB;AAAA,YAC7B,OAAO;AACL,qBAAO,oBAAoB;AAAA,YAC7B;AAAA,UACF,EAAG;AAEH,iBAAO;AAAA,YACL;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACF;AAAA,QACF;AAEA,YAAI,oBAAqB,WAAY;AACnC,cAAI,SAAS,aAAaH,UAAS,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,GAAG,IAAI,CAAC,KAAK,KAAK,KAAK,GAAG;AAClF,iBAAO,OAAO,IAAI,SAAU,OAAO;AACjC,gBAAI,UAAU,WAAW,KAAK;AAC9B,mBAAO;AAAA,cACL;AAAA,cACA,QAAQ,KAAK,MAAM,QAAQ,0BAA0B,KAAK,GAAG;AAAA,cAC7D,QAAQ,KAAK,MAAO,QAAQ,0BAA0B,KAAK,MAAQ,EAAG;AAAA;AAAA,cACtE,OAAO,QAAQ,yBAAyB;AAAA,YAC1C;AAAA,UACF,CAAC;AAAA,QACH,EAAG;AAEH,YAAI,gBAAiB,WAAY;AAC/B,cAAI,eAAe,kBAAkB,OAAO,SAAU,OAAO;AAC3D,mBAAO,MAAM,WAAW;AAAA,UAC1B,CAAC;AACD,cAAI,aAAa,SAAS,GAAG;AAC3B,gBAAI,QAAQ,aAAa,CAAC,EAAE;AAC5B,gBAAI,UAAW,KAAK,KAAO,QAAQ;AACnC,mBAAO;AAAA,cACL,MAAM,KAAK,MAAM,UAAU,EAAE;AAAA,cAC7B,QAAQ,UAAU;AAAA,YACpB;AAAA,UACF,OAAO;AACL,kBAAM,MAAM,gFAAgF;AAAA,UAC9F;AAAA,QACF,EAAG;AAEH,eAAO;AAAA,UACL,QAAQ,KAAK;AAAA,UACb,aAAa,KAAK;AAAA,UAClB,QAAQ,KAAK;AAAA,UACb,UAAU,KAAK;AAAA,UACf;AAAA;AAAA,UACA;AAAA;AAAA,UACA;AAAA;AAAA,UACA;AAAA;AAAA,UACA;AAAA;AAAA,UACA;AAAA;AAAA,UACA;AAAA;AAAA,UACA;AAAA;AAAA,QACF;AAAA,MACF,EAAG,MAAM;AAAA,IACX,CAAE;AAAA;AAAA;;;AC5SF;AAAA;AAcA,aAAS,kBAAkB;AACzB,UAAI,OAAO,cAAY,YAAY;AACjC,eAAO;AAAA,MACT,OAAO;AACL,YAAI,CAAC,KAAK,iBAAiB;AACzB,gBAAM;AAAA,QACR,OAAO;AACL,iBAAO,KAAK,gBAAgB,IAAI;AAAA,QAClC;AAAA,MACF;AAAA,IACF;AAEA,QAAI,SAAS,gBAAgB;AAE7B,QAAI;AAAJ,QAAc;AAAd,QAA2B;AAA3B,QAAuC;AAAvC,QAAmD;AACnD,QAAI,OAAO,cAAY,YAAY;AACjC,iBAAW;AAAA,IACb,OAAO;AACL,UAAI,CAAC,QAAK,kBAAmB;AAC3B,cAAM;AAAA,MACR,OAAO;AACL,mBAAW,QAAK;AAAA,MAClB;AAAA,IACF;AACA,kBAAc,SAAS;AACvB,iBAAa,SAAS;AACtB,iBAAa,SAAS;AACtB,uBAAmB,SAAS;AAE3B,KAAC,SAAU,QAAQ,SAAS;AAC3B,UAAI,OAAO,YAAY,YAAY,OAAO,WAAW,aAAa;AAChE,eAAO,UAAU;AAAA,MACnB,OAAO;AACL,YAAI,OAAO,WAAW,cAAc,OAAO,KAAK;AAC9C,iBAAO,OAAO;AAAA,QAChB,OAAO;AACL,iBAAO,WAAW;AAAA,QACpB;AAAA,MACF;AAAA,IACF,GAAE,SAAO,SAAU,QAAQ;AACzB;AAEA,aAAO,mBAAmB;AAO1B,eAAS,YAAY,QAAQ;AAC3B,YAAI,MAAM,WAAW,MAAM;AAC3B,YAAI,OAAO,KAAK,OAAO,KAAK,MAAM,MAAM,GAAG;AAC3C,YAAI,IAAI,OAAO,MAAM;AACrB,eAAQ,IAAI;AAAA,MACd;AAOA,eAAS,UAAU,QAAQ;AACzB,YAAI,MAAM,WAAW,MAAM;AAC3B,YAAI,OAAO,KAAK,MAAM,MAAM;AAC5B,eAAO;AAAA,MACT;AAQA,eAAS,WAAW,QAAQ;AAC1B,YAAI,IAAI,SAAS,SAAS;AAC1B,YAAI,MAAM,KAAK,MAAM,IAAI,GAAG,IAAI;AAChC,eAAO;AAAA,MACT;AAOA,eAAS,WAAW,QAAQ;AAC1B,YAAI,KAAK,cAAc,MAAM;AAC7B,YAAI,OAAO,MAAM;AACjB,eAAO;AAAA,MACT;AAOA,eAAS,iBAAiB,QAAQ;AAChC,YAAI,OAAO,WAAW,MAAM;AAC5B,YAAI,QAAQ;AACV,iBAAO;AAAA;AAEP,iBAAO;AAAA,MACX;AAOA,eAAS,cAAc,QAAQ;AAC7B,YAAI,IAAI,SAAS,SAAS;AAC1B,YAAI,SAAS,IAAI;AACjB,eAAO;AAAA,MACT;AAUA,eAAS,gBAAgB,QAAQ;AAC/B,YAAI,SAAS;AACb,YAAI,SAAS,UAAU,MAAM;AAC7B,YAAI,WAAW,YAAY,MAAM;AAGjC,YAAI,eAAe;AACnB,YAAI,YAAY,MAAM,YAAY,GAAG;AACnC,yBAAe;AAAA,QACjB;AAEA,YAAI,aAAa;AACjB,YAAI,iBAAiB,MAAM,GAAG;AAC5B,cAAI,UAAU;AACZ,yBAAa;AAAA,QACjB,OAAO;AACL,cAAI,UAAU,KAAK;AAEjB,gBAAI,UAAU,SAAS,CAAC,MAAM,GAAG;AAC/B,2BAAa;AAAA,YACf,OAAO;AACL,2BAAa;AAAA,YACf;AAAA,UACF;AAAA,QACF;AAIA,YAAI,aAAa,IAAI;AACnB,cAAI,eAAe,YAAY,SAAS,CAAC;AACzC,cAAI,iBAAiB,GAAG;AACtB,2BAAe;AAAA,UACjB;AAAA,QACF;AAGA,YAAI,YAAY,IAAI;AAClB,cAAI,eAAe,YAAY,SAAS,CAAC;AACzC,cAAI,gBAAgB,GAAG;AACrB,2BAAe;AAAA,UACjB;AAAA,QACF;AAGA,YAAI,iBAAiB,KAAK,eAAe,GAAG;AAC1C,mBAAS;AAAA,QACX,WAAW,iBAAiB,GAAG;AAC7B,mBAAS;AAAA,QACX,WAAW,eAAe,GAAG;AAC3B,mBAAS;AAAA,QACX,OAAO;AACL,mBAAS;AAAA,QACX;AAEA,eAAO;AAAA,MACT;AAQA,eAAS,gBAAgB,QAAQ;AAC/B,YAAI,IAAI,gBAAgB,MAAM;AAC9B,YAAI,MAAM,GAAG;AACX,iBAAO;AAAA,QACT;AACA,YAAI,MAAM,KAAK,MAAM,GAAG;AACtB,iBAAO;AAAA,QACT;AAEA,YAAI,gBAAgB,SAAS,CAAC,MAAM,GAAG;AACrC,iBAAO;AAAA,QACT;AAEA,eAAO;AAAA,MACT;AAQA,eAAS,2BAA2B,SAAS,QAAQ;AACnD,YAAI,YAAY,YAAY,OAAO,KAAK,eAAe,MAAM,GAAG;AAC9D,iBAAO;AAAA,QACT;AACA,YAAI,YAAY,YAAY,SAAS,KAAK,YAAY,YAAY,WAAW,GAAG;AAC9E,iBAAO;AAAA,QACT;AAEA,eAAO,UAAU,MAAM,IAAI,KAAK;AAAA,MAClC;AAOA,eAAS,yBAAyB,QAAQ;AACxC,YAAI,iBAAiB,MAAM,GAAG;AAC5B,iBAAO;AAAA,QACT,WAAW,eAAe,MAAM,GAAG;AACjC,iBAAO;AAAA,QACT,OAAO;AACL,iBAAO;AAAA,QACT;AAAA,MACF;AAOA,eAAS,8BAA8B,QAAQ;AAC7C,YAAI,gBAAgB,MAAM,GAAG;AAC3B,iBAAO;AAAA,QACT,OAAO;AACL,iBAAO;AAAA,QACT;AAAA,MACF;AAOA,eAAS,iBAAiB,QAAQ;AAChC,eAAO,gBAAgB,MAAM,MAAM;AAAA,MACrC;AAOA,eAAS,eAAe,QAAQ;AAC9B,eAAO,gBAAgB,MAAM,MAAM;AAAA,MACrC;AAOA,eAAS,gBAAgB,QAAQ;AAC/B,YAAI,SAAS,MAAM,KAAK,SAAS,QAAQ,KAAK,SAAS,QAAQ,GAAG;AAChE,iBAAO;AAAA,QACT,OAAO;AACL,iBAAO;AAAA,QACT;AAAA,MACF;AAMA,eAAS,iBAAiB,eAAe;AACvC,YAAI,OAAO,OAAO,SAAS,eAAe,UAAU;AACpD,iBAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC5B,cAAI,YAAY,cAAc,IAAI;AAClC,cAAI,UAAU,SAAS,YAAY,OAAO,KAAK,UAAU,OAAO,IAAI;AAClE,mBAAO;AAAA,UACT;AACA,eAAK,IAAI,GAAG,KAAK;AAAA,QACnB;AACA,cAAM;AAAA,MACR;AAUA,eAAS,UAAU,QAAQ;AACzB,YAAI,OAAO,KAAK,iBAAiB,OAAO,KAAK,CAAC,CAAC,IAAI,GAAG;AACpD,iBAAO,OAAO,KAAK,IAAI;AAAA,QACzB,OAAO;AACL,iBAAO,OAAO,KAAK,IAAI;AAAA,QACzB;AAAA,MACF;AAUA,eAAS,eAAe,QAAQ;AAC9B,YAAI,OAAO,MAAM,IAAI,KAAK,WAAW,MAAM,IAAI,GAAG;AAChD,iBAAO,OAAO,KAAK,IAAI;AAAA,QACzB,OAAO;AACL,iBAAO,OAAO,KAAK,IAAI;AAAA,QACzB;AAAA,MACF;AAOA,eAAS,mBAAmB,QAAQ;AAClC,eAAO,SAAS;AAAA,MAClB;AAOA,eAAS,oBAAoB,QAAQ;AACnC,YAAI,gBAAgB,OAAO,KAAK;AAChC,YAAI,gBAAgB,mBAAmB,aAAa;AACpD,YAAI,OAAO,KAAK,aAAa,IAAI,GAAG;AAClC,iBAAO,gBAAgB,MAAM;AAAA,QAC/B,OAAO;AACL,iBAAO,gBAAgB,MAAM;AAAA,QAC/B;AAAA,MACF;AAOA,eAAS,iBAAiB,KAAK;AAC7B,eAAO;AAAA,UACL,OAAQ,MAAM,KAAM;AAAA,UACpB,YAAY,MAAM,KAAK,WAAW,KAAK,IAAI,WAAW,KAAK;AAAA,QAC7D;AAAA,MACF;AAOA,eAAS,cAAc,QAAQ;AAC7B,YAAI,gBAAgB,OAAO,KAAK;AAChC,YAAI,gBAAgB,mBAAmB,aAAa;AACpD,YAAI,OAAO,KAAK,aAAa,IAAI,GAAG;AAClC,kBAAQ,gBAAgB,MAAM,KAAK;AAAA,QACrC,OAAO;AACL,kBAAQ,gBAAgB,MAAM,KAAK;AAAA,QACrC;AAAA,MACF;AAUA,eAAS,gBAAgB,EAAC,KAAK,OAAO,OAAM,GAAG,QAAQ;AACrD,YAAI,WAAW,QAAQ,WAAW,QAAW;AAE3C,cAAI,YAAY,OAAO,IAAI;AAC3B,cAAI,UAAU,iBAAiB,GAAG;AAClC,cAAI,SAAS,UAAU,MAAM;AAC7B,cAAI,aAAa,cAAc,MAAM;AACrC,cAAI,UAAU,oBAAoB,MAAM,IAAI;AAC5C,iBAAO,OAAO,WAAW,OAAO,OAAO,SAAS,SAAS,CAAC,IAAI,QAAQ,KAAK,GAAG,OAAO,WAAW,QAAQ,UAAU,CAAC,MAAM,OAAO,YAAY,KAAK,CAAC,SAAS,OAAO,WAAW,UAAU,CAAC,IAAI,OAAO,QAAQ,OAAO,CAAC,eAAe,MAAM,EAAE;AAAA,QAC5O,WAAW,OAAO,WAAW,UAAU;AAErC,cAAI,aAAa;AAAA,YACf,KAAK,WAAY;AACf,kBAAI,YAAY,OAAO,IAAI;AAC3B,qBAAO,OAAO,SAAS,SAAS;AAAA,YAClC;AAAA,YACA,KAAK,WAAY;AACf,kBAAI,YAAY,OAAO,IAAI;AAC3B,qBAAO,OAAO,cAAc,SAAS;AAAA,YACvC;AAAA,YACA,KAAK,WAAY;AACf,kBAAI,UAAU,iBAAiB,GAAG;AAClC,qBAAO,QAAQ;AAAA,YACjB;AAAA,YACA,KAAK,WAAY;AACf,kBAAI,UAAU,iBAAiB,GAAG;AAClC,sBAAQ,KAAK,QAAQ,OAAO,WAAW,IAAI,MAAM,QAAQ,QAAQ,QAAQ;AAAA,YAC3E;AAAA,YACA,KAAK,WAAY;AACf,kBAAI,UAAU,iBAAiB,GAAG;AAClC,qBAAO,OAAO,gBAAgB,QAAQ,UAAU;AAAA,YAClD;AAAA,YACA,KAAK,WAAY;AACf,kBAAI,UAAU,iBAAiB,GAAG;AAClC,qBAAO,OAAO,WAAW,QAAQ,UAAU;AAAA,YAC7C;AAAA,YACA,KAAK,WAAY;AACf,qBAAO,OAAO,SAAS,GAAG;AAAA,YAC5B;AAAA,YACA,KAAK,WAAY;AACf,qBAAO,OAAO,YAAY,KAAK;AAAA,YACjC;AAAA,YACA,KAAK,WAAY;AACf,qBAAO,OAAO,OAAO,OAAO,MAAM,CAAC;AAAA,YACrC;AAAA,YACA,KAAK,WAAY;AACf,kBAAI,aAAa,cAAc,MAAM;AACrC,qBAAO,OAAO,WAAW,UAAU;AAAA,YACrC;AAAA,YACA,KAAK,WAAY;AACf,kBAAI,UAAU,oBAAoB,MAAM,IAAI;AAC5C,qBAAO,OAAO,QAAQ,OAAO;AAAA,YAC/B;AAAA,YACA,KAAK,WAAY;AACf,qBAAO,UAAU,MAAM;AAAA,YACzB;AAAA,YACA,KAAK,WAAY;AACf,qBAAO,OAAO,KAAK;AAAA,YACrB;AAAA,YACA,KAAK,WAAY;AACf,qBAAO,oBAAoB,MAAM;AAAA,YACnC;AAAA,UACF;AAEA,iBAAO,OAAO,WAAW,OAAO,QAAQ,IAAI,OAAO,OAAO,KAAK,UAAU,EAAE,KAAK,GAAG,GAAG,GAAG,GAAG,SAAU,SAAS;AAC7G,mBAAO,WAAW,OAAO,EAAE;AAAA,UAC7B,CAAC,CAAC;AAAA,QAEJ;AACA,cAAM,MAAM,SAAS,8BAA8B;AAAA,MACrD;AAQA,eAAS,iBAAiB,QAAQ;AAChC,gBAAQ,IAAI,iBAAiB;AAAA,MAC/B;AAKA,eAAS,YAAY,YAAY,QAAQ;AACvC,gBAAQ,YAAY;AAAA,UACpB,KAAK,YAAY,QAAQ;AACvB,mBAAO,YAAY,OAAO;AAAA,UAC5B,KAAK,YAAY,OAAO;AACtB,mBAAO,YAAY,KAAK;AAAA,UAC1B,KAAK,YAAY,KAAK;AACpB,mBAAO,YAAY,QAAQ;AAAA,UAC7B,KAAK,YAAY,QAAQ;AACvB,mBAAO,YAAY,OAAO;AAAA,UAC5B,KAAK,YAAY,OAAO;AACtB,mBAAO,YAAY,OAAO;AAAA,UAC5B,KAAK,YAAY,OAAO;AACtB,mBAAO,YAAY,OAAO;AAAA,UAC5B,KAAK,YAAY,OAAO,GAAG;AACzB,gBAAI,iBAAiB,MAAM,GAAG;AAC5B,qBAAO,YAAY,SAAS;AAAA,YAC9B,OAAO;AACL,qBAAO,YAAY,OAAO;AAAA,YAC5B;AAAA,UACF;AAAA,UACA,KAAK,YAAY,OAAO;AACtB,mBAAO,YAAY,SAAS;AAAA,UAC9B,KAAK,YAAY,SAAS;AACxB,mBAAO,YAAY,QAAQ;AAAA,UAC7B,KAAK,YAAY,QAAQ;AACvB,mBAAO,YAAY,QAAQ;AAAA,UAC7B,KAAK,YAAY,QAAQ;AACvB,mBAAO,YAAY,QAAQ;AAAA,UAC7B,KAAK,YAAY,QAAQ;AACvB,mBAAO,YAAY,QAAQ;AAAA,UAC7B,KAAK,YAAY,SAAS;AACxB,mBAAO,YAAY,WAAW;AAAA,UAChC,KAAK,YAAY,WAAW;AAC1B,mBAAO,YAAY,SAAS;AAAA,UAC9B;AACE,kBAAM,MAAM,oDAAoD;AAAA,QAClE;AAAA,MACF;AAOA,eAAS,cAAc,QAAQ;AAI7B,YAAI,cAAc,OAAO,YAAY,UAAU;AAC/C,YAAI,aAAa,YAAY,OAAO;AACpC,YAAI,WAAW;AAEf,YAAI,qBAAqB,OAAO,KAAK,WAAW;AAGhD,YAAI,qBAAqB,GAAG;AAC1B,iBAAO,OAAO,SAAS,OAAO,KAAK,WAAW,GAAG,cAAc,EAAE,OAAO,IAAI,yBAAyB,eAAe,YAAY,MAAM,EAAE,IAAI,GAAG,MAAM,CAAC,CAAC,GAAG;AACxJ,wBAAY,IAAI,yBAAyB,eAAe,YAAY,MAAM,EAAE,IAAI,GAAG,MAAM,CAAC,CAAC,GAAG,KAAK;AAAA,UACrG;AAAA,QACF,OAAO;AACL,aAAG;AACD,wBAAY,SAAS,yBAAyB,eAAe,WAAW,CAAC,GAAG,KAAK;AAAA,UACnF,SAAS,OAAO,SAAS,YAAY,KAAK,MAAM,GAAG,cAAc,EAAE,OAAO,IAAI;AAAA,QAChF;AAGA,eAAO,OAAO,SAAS,OAAO,KAAK,WAAW,GAAG,cAAc,EAAE,OAAO,IAAI,2BAA2B,YAAY,eAAe,WAAW,CAAC,GAAG;AAC/I,sBAAY,IAAI,2BAA2B,YAAY,eAAe,WAAW,CAAC,GAAG,KAAK;AAC1F,uBAAa,YAAY,YAAY,eAAe,WAAW,CAAC;AAAA,QAClE;AAEA,oBAAY,KAAK,MAAM,OAAO,SAAS,OAAO,KAAK,WAAW,GAAG,cAAc,EAAE,OAAO,CAAC;AAMxF,cAAM,sBAAsB,2BAA2B,YAAY,eAAe,MAAM,CAAC;AAC1F,YAAI,uBAAuB,UAAU;AACnC,qBAAW,WAAW;AACtB,uBAAa,YAAY,YAAY,eAAe,WAAW,CAAC;AAAA,QAClE;AAEA,oBAAY,IAAI,OAAO,SAAS,OAAO,KAAK,WAAW,GAAG,cAAc,EAAE,OAAO,GAAG,KAAK;AAEzF,eAAO;AAAA,UACL,KAAK;AAAA,UACL,OAAO;AAAA,UACP,YAAY;AAAA,QACd;AAAA,MACF;AASA,eAAS,YAAY,QAAQ;AAE3B,YAAI,SAAS,KAAK,MAAM;AAExB,YAAI,SAAS,cAAc,MAAM;AAEjC,eAAO,gBAAgB;AAAA,UACrB,KAAK,OAAO;AAAA,UACZ,OAAO,OAAO;AAAA,UACd,QAAQ;AAAA,QACV,GAAG,MAAM;AAAA,MACX;AAEA,eAAS,mBAAmB,eAAe;AACzC,YAAI,OAAO,iBAAiB,aAAa,MAAM,QAAW;AAExD,iBAAO,OAAO,OAAO,iBAAiB,aAAa,GAAG,gBAAgB;AAAA,QACxE,OAAO;AAEL,cAAI;AACJ,cAAI,OAAO,cAAY,YAAY;AACjC,mCAAuB;AAAA,UACzB,OAAO;AACL,gBAAI,QAAQ;AACV,kBAAI,CAAC,OAAO,sBAAsB;AAChC,sBAAM;AAAA,cACR,OAAO;AACL,uCAAuB,OAAO;AAAA,cAChC;AAAA,YACF,OAAO;AACL,oBAAM;AAAA,YACR;AAAA,UACF;AAEA,cAAI,SAAU,gBAAgB,MAAO;AACrC,cAAI,OAAO,qBAAqB,MAAM;AAEtC,cAAI;AACJ,cAAI,KAAK,kBAAkB,CAAC,EAAE,WAAW,GAAG;AAE1C,+BAAmB;AAAA,UAErB,OAAO;AAEL,+BAAmB;AAAA,UAErB;AACA,cAAI,gBAAgB,OAAO,SAAS,aAAa,IAAI,KAAK,cAAc,IAAI,IAAI,KAAK,cAAc,MAAM,IAAI,gBAAgB;AAC7H,cAAI,UAAU,cAAc,aAAa;AACzC,cAAI,iBAAmB,QAAQ,QAAQ,KAAK,KAAM,QAAQ,QACnC,KAAK,kBAAkB,QAAQ,KAAK,KAAM,KAAK,kBAAkB;AACxF,cAAI,SAAS,cAAc,SAAS,gBAAgB,mBAAmB,GAAG,KAAK;AAE/E,iBAAO,iBAAiB,aAAa,IAAI,OAAO,OAAO,gBAAgB;AACvE,iBAAO;AAAA,QACT;AAAA,MACF;AAEA,eAAS,QAAQ;AACf,YAAI,SAAS,cAAc,KAAK,MAAM,CAAC;AACvC,eAAO,OAAO;AAAA,MAChB;AAEA,eAAS,UAAU;AACjB,YAAI,SAAS,cAAc,KAAK,MAAM,CAAC;AACvC,eAAO,OAAO;AAAA,MAChB;AAEA,eAAS,SAAS;AAChB,eAAO,UAAU,KAAK,MAAM,CAAC;AAAA,MAC/B;AAEA,aAAO,gBACL,OAAO,SACL,OAAO,SACL;AAEN,aAAO,GAAG,cACR,OAAO,GAAG,WACR,OAAO,GAAG,WACR;AAEN,aAAO,qBAAqB;AAE5B,aAAO,GAAG,QAAQ;AAClB,aAAO,GAAG,UAAU;AACpB,aAAO,GAAG,SAAS;AAEnB,aAAO;AAAA,IACT,CAAE;AAAA;AAAA;",
  "names": ["jsYear", "has366day", "leftOver", "khan"]
}
