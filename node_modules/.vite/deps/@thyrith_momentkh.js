import {
  __commonJS,
  __require
} from "./chunk-BYPFWIQ6.js";

// node_modules/@thyrith/momentkh/locale/km.js
var require_km = __commonJS({
  "node_modules/@thyrith/momentkh/locale/km.js"(exports, module) {
    (function(global, factory) {
      if (typeof exports === "object" && typeof module !== "undefined") {
        module.exports = factory();
      } else {
        if (typeof define === "function" && define.amd) {
          define(factory);
        } else {
          if (!global.momentkhLocales) {
            global.momentkhLocales = {
              "km": factory()
            };
          } else {
            global.momentkhLocales["km"] = factory();
          }
        }
      }
    })(exports, function() {
      "use strict";
      let symbolMap = {
        "1": "១",
        "2": "២",
        "3": "៣",
        "4": "៤",
        "5": "៥",
        "6": "៦",
        "7": "៧",
        "8": "៨",
        "9": "៩",
        "0": "០"
      }, numberMap = {
        "១": "1",
        "២": "2",
        "៣": "3",
        "៤": "4",
        "៥": "5",
        "៦": "6",
        "៧": "7",
        "៨": "8",
        "៩": "9",
        "០": "0"
      };
      return {
        months: "មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),
        monthsShort: "មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),
        moonDays: "᧡_᧢_᧣_᧤_᧥_᧦_᧧_᧨_᧩_᧪_᧫_᧬_᧭_᧮_᧯_᧱_᧲_᧳_᧴_᧵_᧶_᧷_᧸_᧹_᧺_᧻_᧼_᧽_᧾_᧿".split("_"),
        moonStatus: "កើត_រោច".split("_"),
        moonStatusShort: "ក_រ".split("_"),
        weekdays: "អាទិត្យ_ច​ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),
        weekdaysShort: "អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),
        weekdaysMin: "អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),
        lunarMonths: "មិគសិរ_បុស្ស_មាឃ_ផល្គុន_ចេត្រ_ពិសាខ_ជេស្ឋ_អាសាឍ_ស្រាពណ៍_ភទ្របទ_អស្សុជ_កត្ដិក_បឋមាសាឍ_ទុតិយាសាឍ".split("_"),
        animalYear: "ជូត_ឆ្លូវ_ខាល_ថោះ_រោង_ម្សាញ់_មមី_មមែ_វក_រកា_ច_កុរ".split("_"),
        eraYear: "សំរឹទ្ធិស័ក_ឯកស័ក_ទោស័ក_ត្រីស័ក_ចត្វាស័ក_បញ្ចស័ក_ឆស័ក_សប្តស័ក_អដ្ឋស័ក_នព្វស័ក".split("_"),
        preparse: function(string) {
          return string.replace(/[១២៣៤៥៦៧៨៩០]/g, function(match) {
            return numberMap[match];
          });
        },
        postformat: function(string) {
          return string.replace(/\d/g, function(match) {
            return symbolMap[match];
          });
        }
      };
    });
  }
});

// node_modules/@thyrith/momentkh/constant.js
var require_constant = __commonJS({
  "node_modules/@thyrith/momentkh/constant.js"(exports, module) {
    (function(global, factory) {
      if (typeof exports === "object" && typeof module !== "undefined") {
        module.exports = factory();
      } else {
        if (typeof define === "function" && define.amd) {
          define(factory);
        } else {
          global.momentkhConstant = factory();
        }
      }
    })(exports, function() {
      "use strict";
      const LunarMonths = {};
      "មិគសិរ_បុស្ស_មាឃ_ផល្គុន_ចេត្រ_ពិសាខ_ជេស្ឋ_អាសាឍ_ស្រាពណ៍_ភទ្របទ_អស្សុជ_កក្ដិក_បឋមាសាឍ_ទុតិយាសាឍ".split("_").forEach((month, index) => {
        LunarMonths[month] = index;
      });
      const SolarMonth = {};
      "មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_").forEach((month, index) => {
        SolarMonth[month] = index;
      });
      const AnimalYear = {};
      "ជូត_ឆ្លូវ_ខាល_ថោះ_រោង_ម្សាញ់_មមីរ_មមែ_វក_រកា_ច_កុរ".split("_").forEach((year, index) => {
        AnimalYear[year] = index;
      });
      const EraYear = {};
      "សំរឹទ្ធិស័ក_ឯកស័ក_ទោស័ក_ត្រីស័ក_ចត្វាស័ក_បញ្ចស័ក_ឆស័ក_សប្តស័ក_អដ្ឋស័ក_នព្វស័ក".split("_").forEach((year, index) => {
        EraYear[year] = index;
      });
      const MoonStatus = {};
      "កើត_រោច".split("_").forEach((moon, index) => {
        MoonStatus[moon] = index;
      });
      const khNewYearMoments = {
        "1879": "12-04-1879 11:36",
        "1897": "13-04-1897 02:00",
        "2011": "14-04-2011 13:12",
        "2012": "14-04-2012 19:11",
        "2013": "14-04-2013 02:12",
        "2014": "14-04-2014 08:07",
        "2015": "14-04-2015 14:02"
      };
      return {
        LunarMonths,
        SolarMonth,
        AnimalYear,
        EraYear,
        MoonStatus,
        khNewYearMoments
      };
    });
  }
});

// node_modules/@thyrith/momentkh/getSoriyatraLerngSak.js
var require_getSoriyatraLerngSak = __commonJS({
  "node_modules/@thyrith/momentkh/getSoriyatraLerngSak.js"(exports, module) {
    (function(global, factory) {
      if (typeof exports === "object" && typeof module !== "undefined") {
        module.exports = factory;
      } else {
        if (typeof define === "function" && define.amd) {
          define(factory);
        } else {
          global.getSoriyatraLerngSak = factory;
        }
      }
    })(exports, function(jsYear) {
      "use strict";
      return function(jsYear2) {
        let LunarMonths;
        if (typeof __require === "function") {
          LunarMonths = require_constant().LunarMonths;
        } else {
          if (!window.momentkhConstant) {
            throw "Please import [MOMENTKH]/constant.js to your project";
          } else {
            LunarMonths = window.momentkhConstant.LunarMonths;
          }
        }
        function getInfo(jsYear3) {
          let h = 292207 * jsYear3 + 373;
          let harkun = Math.floor(h / 800) + 1;
          let kromathopol = 800 - h % 800;
          let a = 11 * harkun + 650;
          let avaman = a % 692;
          let bodithey = (harkun + Math.floor(a / 692)) % 30;
          return {
            harkun,
            kromathopol,
            avaman,
            bodithey
          };
        }
        let info = getInfo(jsYear2);
        function getHas366day(jsYear3) {
          let infoOfYear = getInfo(jsYear3);
          return infoOfYear.kromathopol <= 207;
        }
        function getIsAthikameas(jsYear3) {
          let infoOfYear = getInfo(jsYear3);
          let infoOfNextYear = getInfo(jsYear3 + 1);
          return !(infoOfYear.bodithey === 25 && infoOfNextYear.bodithey === 5) && (infoOfYear.bodithey > 24 || infoOfYear.bodithey < 6 || infoOfYear.bodithey === 24 && infoOfNextYear.bodithey === 6);
        }
        function getIsChantreathimeas(jsYear3) {
          let infoOfYear = getInfo(jsYear3);
          let infoOfNextYear = getInfo(jsYear3 + 1);
          let infoOfPreviousYear = getInfo(jsYear3 - 1);
          let has366day2 = getHas366day(jsYear3);
          return has366day2 && infoOfYear.avaman < 127 || !(infoOfYear.avaman === 137 && infoOfNextYear.avaman === 0) && (!has366day2 && infoOfYear.avaman < 138 || infoOfPreviousYear.avaman === 137 && infoOfYear.avaman === 0);
        }
        let has366day = getHas366day(jsYear2);
        let isAthikameas = getIsAthikameas(jsYear2);
        let isChantreathimeas = getIsChantreathimeas(jsYear2);
        let jesthHas30 = function() {
          let tmp = isChantreathimeas;
          if (isAthikameas && isChantreathimeas) {
            tmp = false;
          }
          if (!isChantreathimeas && getIsAthikameas(jsYear2 - 1) && getIsChantreathimeas(jsYear2 - 1)) {
            tmp = true;
          }
          return tmp;
        }();
        let dayLerngSak = (info.harkun - 2) % 7;
        let lunarDateLerngSak = function() {
          let bodithey = info.bodithey;
          if (getIsAthikameas(jsYear2 - 1) && getIsChantreathimeas(jsYear2 - 1)) {
            bodithey = (bodithey + 1) % 30;
          }
          return {
            day: bodithey >= 6 ? bodithey - 1 : bodithey,
            month: bodithey >= 6 ? LunarMonths["ចេត្រ"] : LunarMonths["ពិសាខ"]
          };
        }();
        function getSunInfo(sotin) {
          let infoOfPreviousYear = getInfo(jsYear2 - 1);
          let sunAverageAsLibda = function() {
            let r2 = 800 * sotin + infoOfPreviousYear.kromathopol;
            let reasey = Math.floor(r2 / 24350);
            let r3 = r2 % 24350;
            let angsar = Math.floor(r3 / 811);
            let r4 = r3 % 811;
            let l1 = Math.floor(r4 / 14);
            let libda = l1 - 3;
            return 30 * 60 * reasey + 60 * angsar + libda;
          }();
          let leftOver = function() {
            let s1 = 30 * 60 * 2 + 60 * 20;
            let leftOver2 = sunAverageAsLibda - s1;
            if (sunAverageAsLibda < s1) {
              leftOver2 += 30 * 60 * 12;
            }
            return leftOver2;
          }();
          let kaen = function() {
            return Math.floor(leftOver / (30 * 60));
          }();
          let lastLeftOver = function() {
            let rs = -1;
            if ([0, 1, 2].includes(kaen)) {
              rs = kaen;
            } else if ([3, 4, 5].includes(kaen)) {
              rs = 30 * 60 * 6 - leftOver;
            } else if ([6, 7, 8].includes(kaen)) {
              rs = leftOver - 30 * 60 * 6;
            } else if ([9, 10, 11].includes(kaen)) {
              rs = 30 * 60 * 11 + 60 * 29 + 60 - leftOver;
            }
            return {
              reasey: Math.floor(rs / (30 * 60)),
              angsar: Math.floor(rs % (30 * 60) / 60),
              libda: rs % 60
            };
          }();
          let [khan, pouichalip] = function() {
            if (lastLeftOver.angsar >= 15) {
              return [
                2 * lastLeftOver.reasey + 1,
                60 * (lastLeftOver.angsar - 15) + lastLeftOver.libda
              ];
            } else {
              return [
                2 * lastLeftOver.reasey,
                60 * lastLeftOver.angsar + lastLeftOver.libda
              ];
            }
          }();
          let phol = function() {
            const chhayaSun = function(khan2) {
              let multiplicities = [35, 32, 27, 22, 13, 5];
              let chhayas = [0, 35, 67, 94, 116, 129];
              switch (khan2) {
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                  return {
                    multiplicity: multiplicities[khan2],
                    chhaya: chhayas[khan2]
                  };
                default:
                  return {
                    chhaya: 134
                  };
              }
            };
            let val = chhayaSun(khan);
            let q = Math.floor(pouichalip * val.multiplicity / 900);
            return {
              reasey: 0,
              angsar: Math.floor((q + val.chhaya) / 60),
              libda: (q + val.chhaya) % 60
            };
          }();
          let sunInaugurationAsLibda = function() {
            let pholAsLibda = 30 * 60 * phol.reasey + 60 * phol.angsar + phol.libda;
            if (kaen <= 5) {
              return sunAverageAsLibda - pholAsLibda;
            } else {
              return sunAverageAsLibda + pholAsLibda;
            }
          }();
          return {
            sunAverageAsLibda,
            khan,
            pouichalip,
            phol,
            sunInaugurationAsLibda
          };
        }
        let newYearsDaySotins = function() {
          let sotins = getHas366day(jsYear2 - 1) ? [363, 364, 365, 366] : [362, 363, 364, 365];
          return sotins.map(function(sotin) {
            let sunInfo = getSunInfo(sotin);
            return {
              sotin,
              reasey: Math.floor(sunInfo.sunInaugurationAsLibda / (30 * 60)),
              angsar: Math.floor(sunInfo.sunInaugurationAsLibda % (30 * 60) / 60),
              // អង្សាស្មើសូន្យ គីជាថ្ងៃចូលឆ្នាំ, មួយ ឬ ពីរ ថ្ងៃបន្ទាប់ជាថ្ងៃវ័នបត ហើយ ថ្ងៃចុងក្រោយគីឡើងស័ក
              libda: sunInfo.sunInaugurationAsLibda % 60
            };
          });
        }();
        let timeOfNewYear = function() {
          let sotinNewYear = newYearsDaySotins.filter(function(sotin) {
            return sotin.angsar === 0;
          });
          if (sotinNewYear.length > 0) {
            let libda = sotinNewYear[0].libda;
            let minutes = 24 * 60 - libda * 24;
            return {
              hour: Math.floor(minutes / 60),
              minute: minutes % 60
            };
          } else {
            throw Error("Plugin is facing wrong calculation on new years hour. No sotin with angsar = 0");
          }
        }();
        return {
          harkun: info.harkun,
          kromathopol: info.kromathopol,
          avaman: info.avaman,
          bodithey: info.bodithey,
          has366day,
          // សុរិយគតិខ្មែរ
          isAthikameas,
          // 13 months
          isChantreathimeas,
          // 30ថ្ងៃនៅខែជេស្ឋ
          jesthHas30,
          // ខែជេស្ឋមាន៣០ថ្ងៃ
          dayLerngSak,
          // ថ្ងៃឡើងស័ក ច័ន្ទ អង្គារ ...
          lunarDateLerngSak,
          // ថ្ងៃទី ខែ ឡើងស័ក
          newYearsDaySotins,
          // សុទិនសម្រាប់គណនាថ្ងៃចូលឆ្នាំ ថ្ងៃវ័នបត និង ថ្ងៃឡើងស័ក
          timeOfNewYear
          // ម៉ោងទេវតាចុះ
        };
      }(jsYear);
    });
  }
});

// node_modules/@thyrith/momentkh/momentkh.js
var require_momentkh = __commonJS({
  "node_modules/@thyrith/momentkh/momentkh.js"(exports, module) {
    function getLocaleConfig() {
      if (typeof __require === "function") {
        return require_km();
      } else {
        if (!this.momentkhLocales) {
          throw "Please import [MOMENTKH]/locale/km.js to your project";
        } else {
          return this.momentkhLocales["km"];
        }
      }
    }
    var config = getLocaleConfig();
    var constant;
    var LunarMonths;
    var SolarMonth;
    var MoonStatus;
    var khNewYearMoments;
    if (typeof __require === "function") {
      constant = require_constant();
    } else {
      if (!exports.momentkhConstant) {
        throw "Please import [MOMENTKH]/constant.js to your project";
      } else {
        constant = exports.momentkhConstant;
      }
    }
    LunarMonths = constant.LunarMonths;
    SolarMonth = constant.SolarMonth;
    MoonStatus = constant.MoonStatus;
    khNewYearMoments = constant.khNewYearMoments;
    (function(global, factory) {
      if (typeof exports === "object" && typeof module !== "undefined") {
        module.exports = factory;
      } else {
        if (typeof define === "function" && define.amd) {
          define(factory);
        } else {
          global.momentkh = factory;
        }
      }
    })(exports, function(Moment) {
      "use strict";
      Moment.khNewYearMoments = khNewYearMoments;
      function getBodithey(beYear) {
        let ahk = getAharkun(beYear);
        let avml = Math.floor((11 * ahk + 25) / 692);
        let m = avml + ahk + 29;
        return m % 30;
      }
      function getAvoman(beYear) {
        let ahk = getAharkun(beYear);
        let avm = (11 * ahk + 25) % 692;
        return avm;
      }
      function getAharkun(beYear) {
        let t = beYear * 292207 + 499;
        let ahk = Math.floor(t / 800) + 4;
        return ahk;
      }
      function kromthupul(beYear) {
        let ah = getAharkunMod(beYear);
        let krom = 800 - ah;
        return krom;
      }
      function isKhmerSolarLeap(beYear) {
        let krom = kromthupul(beYear);
        if (krom <= 207)
          return 1;
        else
          return 0;
      }
      function getAharkunMod(beYear) {
        let t = beYear * 292207 + 499;
        let ahkmod = t % 800;
        return ahkmod;
      }
      function getBoditheyLeap(beYear) {
        let result = 0;
        let avoman = getAvoman(beYear);
        let bodithey = getBodithey(beYear);
        let boditheyLeap = 0;
        if (bodithey >= 25 || bodithey <= 5) {
          boditheyLeap = 1;
        }
        let avomanLeap = 0;
        if (isKhmerSolarLeap(beYear)) {
          if (avoman <= 126)
            avomanLeap = 1;
        } else {
          if (avoman <= 137) {
            if (getAvoman(beYear + 1) === 0) {
              avomanLeap = 0;
            } else {
              avomanLeap = 1;
            }
          }
        }
        if (bodithey === 25) {
          let nextBodithey = getBodithey(beYear + 1);
          if (nextBodithey === 5) {
            boditheyLeap = 0;
          }
        }
        if (bodithey == 24) {
          let nextBodithey = getBodithey(beYear + 1);
          if (nextBodithey == 6) {
            boditheyLeap = 1;
          }
        }
        if (boditheyLeap === 1 && avomanLeap === 1) {
          result = 3;
        } else if (boditheyLeap === 1) {
          result = 1;
        } else if (avomanLeap === 1) {
          result = 2;
        } else {
          result = 0;
        }
        return result;
      }
      function getProtetinLeap(beYear) {
        let b = getBoditheyLeap(beYear);
        if (b === 3) {
          return 1;
        }
        if (b === 2 || b === 1) {
          return b;
        }
        if (getBoditheyLeap(beYear - 1) === 3) {
          return 2;
        }
        return 0;
      }
      function getNumberOfDayInKhmerMonth(beMonth, beYear) {
        if (beMonth === LunarMonths["ជេស្ឋ"] && isKhmerLeapDay(beYear)) {
          return 30;
        }
        if (beMonth === LunarMonths["បឋមាសាឍ"] || beMonth === LunarMonths["ទុតិយាសាឍ"]) {
          return 30;
        }
        return beMonth % 2 === 0 ? 29 : 30;
      }
      function getNumerOfDayInKhmerYear(beYear) {
        if (isKhmerLeapMonth(beYear)) {
          return 384;
        } else if (isKhmerLeapDay(beYear)) {
          return 355;
        } else {
          return 354;
        }
      }
      function getNumberOfDayInGregorianYear(adYear) {
        if (isGregorianLeap(adYear)) {
          return 366;
        } else {
          return 365;
        }
      }
      function isKhmerLeapMonth(beYear) {
        return getProtetinLeap(beYear) === 1;
      }
      function isKhmerLeapDay(beYear) {
        return getProtetinLeap(beYear) === 2;
      }
      function isGregorianLeap(adYear) {
        if (adYear % 4 === 0 && adYear % 100 !== 0 || adYear % 400 === 0) {
          return true;
        } else {
          return false;
        }
      }
      function getVisakhaBochea(gregorianYear) {
        var date = Moment("1/1/" + gregorianYear, "D/M/YYYY");
        for (var i = 0; i < 365; i++) {
          var lunarDate = findLunarDate(date);
          if (lunarDate.month == LunarMonths["ពិសាខ"] && lunarDate.day == 14) {
            return date;
          }
          date.add(1, "day");
        }
        throw "Cannot find Visakhabochea day. Please report this bug.";
      }
      function getBEYear(moment) {
        if (moment.diff(getVisakhaBochea(moment.year())) > 0) {
          return moment.year() + 544;
        } else {
          return moment.year() + 543;
        }
      }
      function getMaybeBEYear(moment) {
        if (moment.month() + 1 <= SolarMonth["មេសា"] + 1) {
          return moment.year() + 543;
        } else {
          return moment.year() + 544;
        }
      }
      function getMohaSakarajYear(adYear) {
        return adYear - 77;
      }
      function getJolakSakarajYear(moment) {
        let gregorianYear = moment.year();
        let newYearMoment = getKhNewYearMoment(gregorianYear);
        if (moment.diff(newYearMoment) < 0) {
          return gregorianYear + 543 - 1182;
        } else {
          return gregorianYear + 544 - 1182;
        }
      }
      function getKhmerLunarDay(day) {
        return {
          count: day % 15 + 1,
          moonStatus: day > 14 ? MoonStatus["រោច"] : MoonStatus["កើត"]
        };
      }
      function getAnimalYear(moment) {
        let gregorianYear = moment.year();
        let newYearMoment = getKhNewYearMoment(gregorianYear);
        if (moment.diff(newYearMoment) < 0) {
          return (gregorianYear + 543 + 4) % 12;
        } else {
          return (gregorianYear + 544 + 4) % 12;
        }
      }
      function formatKhmerDate({ day, month, moment }, format) {
        if (format === null || format === void 0) {
          let dayOfWeek = moment.day();
          let moonDay = getKhmerLunarDay(day);
          let beYear = getBEYear(moment);
          let animalYear = getAnimalYear(moment);
          let eraYear = getJolakSakarajYear(moment) % 10;
          return config.postformat(`ថ្ងៃ${config.weekdays[dayOfWeek]} ${moonDay.count}${config.moonStatus[moonDay.moonStatus]} ខែ${config.lunarMonths[month]} ឆ្នាំ${config.animalYear[animalYear]} ${config.eraYear[eraYear]} ពុទ្ធសករាជ ${beYear}`);
        } else if (typeof format === "string") {
          let formatRule = {
            "W": function() {
              let dayOfWeek = moment.day();
              return config.weekdays[dayOfWeek];
            },
            "w": function() {
              let dayOfWeek = moment.day();
              return config.weekdaysShort[dayOfWeek];
            },
            "d": function() {
              let moonDay = getKhmerLunarDay(day);
              return moonDay.count;
            },
            "D": function() {
              let moonDay = getKhmerLunarDay(day);
              return ("" + moonDay.count).length === 1 ? "0" + moonDay.count : moonDay.count;
            },
            "n": function() {
              let moonDay = getKhmerLunarDay(day);
              return config.moonStatusShort[moonDay.moonStatus];
            },
            "N": function() {
              let moonDay = getKhmerLunarDay(day);
              return config.moonStatus[moonDay.moonStatus];
            },
            "o": function() {
              return config.moonDays[day];
            },
            "m": function() {
              return config.lunarMonths[month];
            },
            "M": function() {
              return config.months[moment.month()];
            },
            "a": function() {
              let animalYear = getAnimalYear(moment);
              return config.animalYear[animalYear];
            },
            "e": function() {
              let eraYear = getJolakSakarajYear(moment) % 10;
              return config.eraYear[eraYear];
            },
            "b": function() {
              return getBEYear(moment);
            },
            "c": function() {
              return moment.year();
            },
            "j": function() {
              return getJolakSakarajYear(moment);
            }
          };
          return config.postformat(format.replace(new RegExp(Object.keys(formatRule).join("|"), "g"), function(matched) {
            return formatRule[matched]();
          }));
        }
        throw Error(format + " is not a valid date format.");
      }
      function readLunarDate(...params) {
        console.log("Now working yet");
      }
      function nextMonthOf(khmerMonth, BEYear) {
        switch (khmerMonth) {
          case LunarMonths["មិគសិរ"]:
            return LunarMonths["បុស្ស"];
          case LunarMonths["បុស្ស"]:
            return LunarMonths["មាឃ"];
          case LunarMonths["មាឃ"]:
            return LunarMonths["ផល្គុន"];
          case LunarMonths["ផល្គុន"]:
            return LunarMonths["ចេត្រ"];
          case LunarMonths["ចេត្រ"]:
            return LunarMonths["ពិសាខ"];
          case LunarMonths["ពិសាខ"]:
            return LunarMonths["ជេស្ឋ"];
          case LunarMonths["ជេស្ឋ"]: {
            if (isKhmerLeapMonth(BEYear)) {
              return LunarMonths["បឋមាសាឍ"];
            } else {
              return LunarMonths["អាសាឍ"];
            }
          }
          case LunarMonths["អាសាឍ"]:
            return LunarMonths["ស្រាពណ៍"];
          case LunarMonths["ស្រាពណ៍"]:
            return LunarMonths["ភទ្របទ"];
          case LunarMonths["ភទ្របទ"]:
            return LunarMonths["អស្សុជ"];
          case LunarMonths["អស្សុជ"]:
            return LunarMonths["កក្ដិក"];
          case LunarMonths["កក្ដិក"]:
            return LunarMonths["មិគសិរ"];
          case LunarMonths["បឋមាសាឍ"]:
            return LunarMonths["ទុតិយាសាឍ"];
          case LunarMonths["ទុតិយាសាឍ"]:
            return LunarMonths["ស្រាពណ៍"];
          default:
            throw Error("Plugin is facing wrong calculation (Invalid month)");
        }
      }
      function findLunarDate(target) {
        let epochMoment = Moment("1/1/1900", "D/M/YYYY");
        let khmerMonth = LunarMonths["បុស្ស"];
        let khmerDay = 0;
        let differentFromEpoch = target.diff(epochMoment);
        if (differentFromEpoch > 0) {
          while (Moment.duration(target.diff(epochMoment), "milliseconds").asDays() > getNumerOfDayInKhmerYear(getMaybeBEYear(epochMoment.clone().add(1, "year")))) {
            epochMoment.add(getNumerOfDayInKhmerYear(getMaybeBEYear(epochMoment.clone().add(1, "year"))), "day");
          }
        } else {
          do {
            epochMoment.subtract(getNumerOfDayInKhmerYear(getMaybeBEYear(epochMoment)), "day");
          } while (Moment.duration(epochMoment.diff(target), "milliseconds").asDays() > 0);
        }
        while (Moment.duration(target.diff(epochMoment), "milliseconds").asDays() > getNumberOfDayInKhmerMonth(khmerMonth, getMaybeBEYear(epochMoment))) {
          epochMoment.add(getNumberOfDayInKhmerMonth(khmerMonth, getMaybeBEYear(epochMoment)), "day");
          khmerMonth = nextMonthOf(khmerMonth, getMaybeBEYear(epochMoment));
        }
        khmerDay += Math.floor(Moment.duration(target.diff(epochMoment), "milliseconds").asDays());
        const totalDaysOfTheMonth = getNumberOfDayInKhmerMonth(khmerMonth, getMaybeBEYear(target));
        if (totalDaysOfTheMonth <= khmerDay) {
          khmerDay = khmerDay % totalDaysOfTheMonth;
          khmerMonth = nextMonthOf(khmerMonth, getMaybeBEYear(epochMoment));
        }
        epochMoment.add(Moment.duration(target.diff(epochMoment), "milliseconds").asDays(), "day");
        return {
          day: khmerDay,
          month: khmerMonth,
          epochMoved: epochMoment
        };
      }
      function toLunarDate(format) {
        let target = this.clone();
        let result = findLunarDate(target);
        return formatKhmerDate({
          day: result.day,
          month: result.month,
          moment: target
        }, format);
      }
      function getKhNewYearMoment(gregorianYear) {
        if (Moment.khNewYearMoments[gregorianYear] !== void 0) {
          return Moment(Moment.khNewYearMoments[gregorianYear], "DD-MM-YYYY H:m");
        } else {
          let getSoriyatraLerngSak;
          if (typeof __require === "function") {
            getSoriyatraLerngSak = require_getSoriyatraLerngSak();
          } else {
            if (window) {
              if (!window.getSoriyatraLerngSak) {
                throw "Please import [MOMENTKH]/getSoriyatraLerngSak.js to your project";
              } else {
                getSoriyatraLerngSak = window.getSoriyatraLerngSak;
              }
            } else {
              throw "Cannot import getSoriyatraLerngSak. This is might not a nodejs environment or a browser";
            }
          }
          let jsYear = gregorianYear + 544 - 1182;
          let info = getSoriyatraLerngSak(jsYear);
          let numberNewYearDay;
          if (info.newYearsDaySotins[0].angsar === 0) {
            numberNewYearDay = 4;
          } else {
            numberNewYearDay = 3;
          }
          let epochLerngSak = Moment(`17-04-${gregorianYear} ${info.timeOfNewYear.hour}:${info.timeOfNewYear.minute}`, "DD-MM-YYYY H:m");
          let khEpoch = findLunarDate(epochLerngSak);
          let diffFromEpoch = (khEpoch.month - 4) * 30 + khEpoch.day - ((info.lunarDateLerngSak.month - 4) * 30 + info.lunarDateLerngSak.day);
          let result = epochLerngSak.subtract(diffFromEpoch + numberNewYearDay - 1, "day");
          Moment.khNewYearMoments[gregorianYear] = result.format("DD-MM-YYYY H:m");
          return result;
        }
      }
      function khDay() {
        let result = findLunarDate(this.clone());
        return result.day;
      }
      function khMonth() {
        let result = findLunarDate(this.clone());
        return result.month;
      }
      function khYear() {
        return getBEYear(this.clone());
      }
      Moment.readLunarDate = Moment.khDate = Moment.khdate = readLunarDate;
      Moment.fn.toLunarDate = Moment.fn.toKhDate = Moment.fn.tokhdate = toLunarDate;
      Moment.getKhNewYearMoment = getKhNewYearMoment;
      Moment.fn.khDay = khDay;
      Moment.fn.khMonth = khMonth;
      Moment.fn.khYear = khYear;
      return Moment;
    });
  }
});
export default require_momentkh();
/*! Bundled license information:

@thyrith/momentkh/locale/km.js:
  (*! moment.js locale configuration *)
*/
//# sourceMappingURL=@thyrith_momentkh.js.map
